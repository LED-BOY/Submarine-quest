{"version":3,"sources":["src/CST.js","src/scenes/LoadScene.js","src/scenes/MenuScene.js","src/scenes/PlayScene.js","src/scenes/EndScene.js","src/main.js"],"names":["CST","SCENES","LOAD","MENU","PLAY","END","IMAGE","LOGO","OPTIONS","TITLE","GAME_BG","END_BG","FIRE_BUTTON","AUDIO","GAME_MUSIC","DIVER_SOUND","ENEMY_SOUND","SHARK_SOUND","PLAYER_FIRE_SOUND","END_SOUND","NEW_SOUND","OXIGEN","OXIGEN_LOW","RESCUE_COMPLETED","RESCUE_SEQUENCE","SPRITE","SUBMARINE","SHARK","DIVER","BOMB","exports","_CST","require","_typeof","o","Symbol","iterator","constructor","prototype","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","_toPropertyKey","key","_createClass","protoProps","staticProps","arg","_toPrimitive","String","input","hint","prim","toPrimitive","undefined","res","call","Number","_inherits","subClass","superClass","create","value","_setPrototypeOf","p","setPrototypeOf","bind","__proto__","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","result","_getPrototypeOf","NewTarget","Reflect","construct","arguments","apply","_possibleConstructorReturn","self","_assertThisInitialized","ReferenceError","sham","Proxy","Boolean","e","valueOf","getPrototypeOf","LoadScene","_Phaser$Scene","Phaser","Scene","_super","prop","load","setPath","image","audio","spritesheet","frameWidth","frameHeight","_this","loadSprites","loadAudio","loadImages","loadingBar","add","graphics","fillStyle","color","on","percent","fillRect","game","renderer","height","width","console","log","file","src","scene","stop","start","MenuScene","sound","stopAll","setDepth","setOrigin","playButton","hoverSprite","sprite","x","y","setScale","pauseOnBlur","play","loop","volume","controls","keyboard","addKeys","anims","frameRate","repeat","frames","generateFrameNumbers","setInteractive","setVisible","shutdown","run","time","delta","enter","isDown","playerDirection","submarineOnSurface","submarineSpeed","oxigenLevel","oxigenBar","pausePlayer","diversXPos","diversToRescue","diversRescued","getShark","getEnemy","getDiver","yPosArray","incrementEnemiesVelocity","diverRescued","Events","EventEmitter","makeSoundFx","yPosArrayFunction","updateScoreAndLives","lives","score","scoreText","extraLife","level","sceneInit","actionKey","actionKeyRepeat","continueGame","escKey","diversCollider","PlayScene","data","initVariables","sceneRestart","gameLevel","resetScore","plugin","background","physics","alpha","sys","device","touch","joyStick","plugins","get","radius","base","circle","thumb","dir","forceMin","fixed","enable","createCursorKeys","fireButton","addPointer","addKey","xForExit","text","fontSize","fill","fontFamily","end","soundFx","rescueEvent","arrayFunction","scoreAndLives","emit","submarine","setSize","setOffset","body","customBoundsRectangle","Geom","Rectangle","setCollideWorldBounds","manyEnemies","group","defaults","setImmovable","manySharks","manyDivers","diversSaved","manyBombs","timedEvents","collider","_background","checkWorldBounds","destroy","_shark","active","_enemy","tintTopLeft","diver","shark","sharkVel","velocity","setVelocityX","_enemies","world","addCollider","diverOne","diverTwo","overlap","bombsVel","_submarine","thisScore","removeAllEvents","addEvent","delay","Math","Between","callback","sharkEvent","callbackScope","enemySubEvent","enemySubFire","diverEvent","sharkWavePattern","oxigenTimer","patrolSubmarineEvent","scoreToAdd","setText","livesXPos","displayWidth","object","sort","a","b","round","center","effect","getLength","getDivers","getChildren","remove","clear","defaultFillColor","stopByKey","removeByKey","resumeAll","endGame","updateBodies","index","sharkGroupLength","reset","halfWidth","tint","kamikazeDiver","setVelocityY","enemiesGroupLength","bombsGroupLength","getBomb","diversGroupLength","sharkBody","sharkRight","right","sharkLeft","left","sarkHalfWidth","sharkCenterY","pause","finalScore","continue","onCeiling","pauseAll","delayedCall","isUp","up","down","onFloor","restart","EndScene","sleep","_LoadScene","_MenuScene","_PlayScene","_EndScene","Game","render","pixelArt","scale","autoCenter","Scale","CENTER_BOTH","mode","FIT","default","arcade","debug","debugShowBody","debugShowStaticBody"],"mappings":"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","file":"main.aa386a50.js","sourceRoot":"..","sourcesContent":["export const CST = {\r\n    SCENES: {\r\n        LOAD: \"LOAD\",\r\n        MENU: \"MENU\",\r\n        PLAY: \"PLAY\",\r\n        END: \"END\"\r\n    },\r\n    IMAGE: {\r\n        LOGO: \"logo.png\",\r\n        OPTIONS: \"options_button.png\",\r\n        PLAY: \"play_button.png\",\r\n        TITLE: \"title_bg.png\",\r\n        GAME_BG: \"game_bg.png\",\r\n        END_BG: \"end_bg.png\",\r\n        FIRE_BUTTON: \"fire_button.png\"\r\n    },\r\n    AUDIO: {\r\n        TITLE: \"menu_theme.mp3\",\r\n        GAME_MUSIC: \"main_theme.mp3\",\r\n        DIVER_SOUND: \"diver_rescued.ogg\",\r\n        ENEMY_SOUND: \"enemy_sub_destroyed.ogg\",\r\n        SHARK_SOUND: \"shark_killed.ogg\",\r\n        PLAYER_FIRE_SOUND: \"fire_sound.ogg\",\r\n        END_SOUND: \"gameover.ogg\",\r\n        NEW_SOUND: \"new_game.ogg\",\r\n        OXIGEN: \"oxigen_refill.ogg\",\r\n        OXIGEN_LOW: \"oxigen_low.ogg\",\r\n        RESCUE_COMPLETED: \"rescue_completed.ogg\",\r\n        RESCUE_SEQUENCE: \"rescue_sequence.ogg\"\r\n    },\r\n    SPRITE: {\r\n        SUBMARINE: \"submarine.png\",\r\n        SHARK: \"shark.png\",\r\n        DIVER: \"diver.png\",\r\n        BOMB: \"bomb.png\"\r\n    }\r\n}","import { CST } from \"../CST\";\r\nexport class LoadScene extends Phaser.Scene {\r\n    constructor() {\r\n        super({\r\n            key: CST.SCENES.LOAD\r\n        })\r\n    }\r\n    init() {\r\n\r\n    }\r\n\r\n    loadImages() {// load all images at once\r\n        this.load.setPath(\"./assets/image\");\r\n\r\n        for (let prop in CST.IMAGE) {\r\n            this.load.image(CST.IMAGE[prop], CST.IMAGE[prop]);\r\n        }\r\n    }\r\n\r\n    loadAudio() { // load all audio at once\r\n        this.load.setPath(\"./assets/audio\");\r\n\r\n        for (let prop in CST.AUDIO) {\r\n            this.load.audio(CST.AUDIO[prop], CST.AUDIO[prop]);\r\n        }\r\n    }\r\n\r\n    loadSprites() {  // if all sprites are the same size load all at once\r\n        this.load.setPath(\"./assets/sprite\");\r\n\r\n        this.load.spritesheet(CST.SPRITE.SUBMARINE, CST.SPRITE.SUBMARINE, { frameWidth: 90, frameHeight: 33});\r\n        this.load.spritesheet(CST.SPRITE.SHARK, CST.SPRITE.SHARK, { frameWidth: 440, frameHeight: 232});\r\n        this.load.spritesheet(CST.SPRITE.DIVER, CST.SPRITE.DIVER, { frameWidth: 316, frameHeight: 213});\r\n        this.load.spritesheet(CST.SPRITE.BOMB, CST.SPRITE.BOMB, { frameWidth: 279, frameHeight: 210});\r\n    }\r\n\r\n    preload() {\r\n\r\n        this.loadSprites();\r\n\r\n        this.loadAudio();\r\n\r\n        this.loadImages();\r\n        //create loading bar\r\n\r\n        let loadingBar = this.add.graphics({\r\n            fillStyle: {\r\n                color: 0xffffff // white\r\n            }\r\n        })\r\n        // simulate large load\r\n\r\n        // loader event\r\n\r\n        this.load.on(\"progress\", (percent) => {\r\n            loadingBar.fillRect(0, this.game.renderer.height / 2, this.renderer.width * percent, 50);\r\n            console.log(percent);\r\n        })\r\n\r\n        this.load.on(\"complete\", () => {\r\n        });\r\n\r\n        this.load.on(\"load\", (file) => {\r\n            console.log(file.src)\r\n        })\r\n    }\r\n    create() {\r\n        this.scene.stop(CST.SCENES.LOAD);\r\n        this.scene.start(CST.SCENES.MENU);\r\n    }\r\n}","import { CST } from \"../CST\";\r\n\r\nexport class MenuScene extends Phaser.Scene {\r\n    constructor() {\r\n        super({\r\n            key: CST.SCENES.MENU\r\n        })\r\n    }\r\n    init() {\r\n    }\r\n\r\n    preload() {\r\n        this.sound.stopAll(); // stops menu sound \r\n    }\r\n\r\n    create() { // create menu image\r\n        console.log(\"title loading\");\r\n        // creates in z order\r\n\r\n        this.add.image(this.game.renderer.width / 2, this.game.renderer.height * 0.20, CST.IMAGE.LOGO).setDepth(1);\r\n        this.add.image(0, 0, CST.IMAGE.TITLE).setOrigin(0).setDepth(0);\r\n\r\n        //set button to a variable\r\n        let playButton = this.add.image(this.game.renderer.width / 2, this.game.renderer.height / 2, CST.IMAGE.PLAY).setDepth(1);\r\n        //this.add.image(this.game.renderer.width / 2, this.game.renderer.height / 2 + 100, CST.IMAGE.OPTIONS).setDepth(1);\r\n        let hoverSprite = this.add.sprite((playButton.x - playButton.width), playButton.y, CST.SPRITE.SUBMARINE).setScale(1);\r\n\r\n        //play music\r\n        this.sound.pauseOnBlur = false; // play audio even when out of focus.\r\n        this.sound.play(CST.AUDIO.TITLE, {\r\n            loop: true,\r\n            volume: 0.8\r\n        })\r\n\r\n        this.controls = this.input.keyboard.addKeys(\"up, down, left, right, space, enter\");// keyboard keys\r\n\r\n        // create animation\r\n        this.anims.create({\r\n            key: \"animSubmarine\",\r\n            frameRate: 3,\r\n            repeat: -1,// forever\r\n            frames: this.anims.generateFrameNumbers(CST.SPRITE.SUBMARINE, {\r\n                frames: [0, 1, 2]\r\n            })\r\n        })\r\n        hoverSprite.play(\"animSubmarine\");\r\n\r\n        // make buttons interactive\r\n        playButton.setInteractive();\r\n\r\n        playButton.on(\"pointerover\", () => {\r\n            console.log(\"hovering\")\r\n            hoverSprite.setVisible(true);\r\n            hoverSprite.play(\"animSubmarine\");\r\n            hoverSprite.x = playButton.x - playButton.width;\r\n            hoverSprite.y = playButton.y;\r\n        })\r\n\r\n        playButton.on(\"pointerout\", () => {\r\n            console.log(\"out of here\")\r\n            hoverSprite.setVisible(false);\r\n        })\r\n\r\n        playButton.on(\"pointerup\", () => {\r\n            console.log(\"Play\")\r\n            this.input.shutdown();\r\n            this.scene.stop(CST.SCENES.MENU);\r\n            this.scene.run(CST.SCENES.PLAY);\r\n        })\r\n\r\n    }\r\n\r\n    update(time, delta) {\r\n\r\n        if (this.controls.enter.isDown == true) {// use enter key to start game\r\n            this.input.shutdown();\r\n            this.scene.stop(CST.SCENES.MENU);\r\n            this.scene.run(CST.SCENES.PLAY);\r\n        }\r\n    }\r\n}","import { CST } from \"../CST\";\r\n//********NPCs variables */\r\nlet diversToRescue = 0;\r\nlet diversRescued = 0;\r\nvar getShark = 0; // shark childrens\r\nvar getEnemy = 0; // enemies childrens \r\nvar getDiver = 0;// divers children\r\nlet yPosArray = [130, 230, 330, 430, 530];\r\nlet incrementEnemiesVelocity = 0;\r\nconst diverRescued = new Phaser.Events.EventEmitter();// new event \r\nconst makeSoundFx = new Phaser.Events.EventEmitter();// new event \r\nconst yPosArrayFunction = new Phaser.Events.EventEmitter();// new event \r\nconst updateScoreAndLives = new Phaser.Events.EventEmitter();// new event \r\n//****player variables ********\r\nlet playerDirection; // -1 is left and 1 is right\r\nlet submarineOnSurface;\r\nlet submarineSpeed;\r\nlet oxigenLevel;\r\nvar oxigenBar;\r\nlet pausePlayer;\r\nlet diversXPos;\r\nlet lives = 3;\r\n//********other variables */\r\nlet score = 0;\r\nvar scoreText = 0;\r\nlet extraLife = 1000; // how many points for an extra live\r\nlet level = 1;\r\nlet sceneInit = true;\r\nvar actionKey = false;\r\nlet actionKeyRepeat = true;\r\nlet continueGame = false;\r\nlet escKey = false;\r\nvar diversCollider = 0;\r\n\r\nexport class PlayScene extends Phaser.Scene {\r\n\r\n    constructor() {\r\n        super({ key: CST.SCENES.PLAY });\r\n    }\r\n\r\n    initVariables() { // actually init all player variables.\r\n        playerDirection = 1; // -1 is left and 1 is right\r\n        submarineOnSurface = true;\r\n        submarineSpeed = 140;\r\n        oxigenLevel = 100;\r\n        oxigenBar = 0;\r\n        pausePlayer = false;\r\n        diversXPos = 200;\r\n        yPosArray = [120, 220, 320, 420, 520];\r\n        actionKeyRepeat = true;\r\n    }\r\n\r\n    init(data) {\r\n        this.initVariables();\r\n\r\n        if (data.sceneRestart == true) {// reset this scence but avoid to init events and anims again\r\n\r\n            if (level = data.gameLevel, level > 30) level = 30;\r\n            score = data.resetScore;\r\n        }\r\n    }\r\n\r\n    preload() {\r\n        this.sound.stopAll(); // stops menu sound \r\n\r\n        if (sceneInit) this.load.plugin(\"rexvirtualjoystickplugin\", \"assets/plugins/virtualJoystick.js\", true);\r\n    }\r\n\r\n    create() {\r\n        // add background\r\n        this.background = this.physics.add.image(0, 0, CST.IMAGE.GAME_BG).setOrigin(0).setDepth(0);// background\r\n\r\n        let oceanSurface = this.add.graphics({\r\n            fillStyle: {\r\n                color: 0x27bfc4, // blue\r\n                alpha: 0.8\r\n            }\r\n        });\r\n\r\n        oceanSurface.fillRect(0, 86, 800, 12).setDepth(2);\r\n\r\n        if (this.sys.game.device.input.touch == true) {// true if touch screen is present\r\n            //***********virtual joystick******** */\r\n\r\n            this.joyStick = this.plugins.get(\"rexvirtualjoystickplugin\").add(this, {// virtual joystick deafults\r\n                x: 120,\r\n                y: 470,\r\n                radius: 140,\r\n                base: this.add.circle(0, 0, 50, 0x888888),\r\n                thumb: this.add.circle(0, 0, 25, 0xcccccc),\r\n                dir: \"4dir\",\r\n                forceMin: 16,\r\n                fixed: true,\r\n                enable: true\r\n            });\r\n\r\n            this.controls = this.joyStick.createCursorKeys();// state of cursor keys\r\n            this.fireButton = this.add.image(700, 520, CST.IMAGE.FIRE_BUTTON).setScale(0.4).setDepth(0);// fire button image\r\n            this.input.addPointer(1);\r\n            this.fireButton.setInteractive(); // use background as fire button\r\n\r\n            this.fireButton.on(\"pointerover\", () => {\r\n                actionKey = true;\r\n            });\r\n\r\n        } else {\r\n            this.controls = this.input.keyboard.addKeys(\"up, down, left, right\");// if no touch, use keyboard\r\n            actionKey = this.input.keyboard.addKey(\"space\");// use space as action keys\r\n            escKey = this.input.keyboard.addKey(\"esc\");// use space as action keys\r\n        }\r\n\r\n        //add X to exit game*** \r\n        const xForExit = this.add.text(780, 0, \"X\", { fontSize: \"24px\", fill: \"#0000FF\", fontFamily: \"Arial\" });\r\n        xForExit.setInteractive();\r\n\r\n        xForExit.on(\"pointerup\", () => {\r\n            score = 0;\r\n            this.scene.stop(CST.SCENES.PLAY);\r\n            this.scene.run(CST.SCENES.MENU);\r\n        })\r\n\r\n        // ************submarine animatiion***************\r\n        if (sceneInit) { // create anims and events only once\r\n            sceneInit = false;\r\n\r\n            this.anims.create({\r\n                key: \"left\",\r\n                frameRate: 10,\r\n                repeat: -1,\r\n                frames: this.anims.generateFrameNumbers(CST.SPRITE.SUBMARINE, {\r\n                    start: 0,\r\n                    end: 2\r\n                })\r\n            });\r\n\r\n            this.anims.create({\r\n                key: \"right\",\r\n                frameRate: 10,\r\n                repeat: -1,\r\n                frames: this.anims.generateFrameNumbers(CST.SPRITE.SUBMARINE, {\r\n                    start: 3,\r\n                    end: 5\r\n                })\r\n            });\r\n\r\n            //********************* shark animation**************\r\n            this.anims.create({\r\n                key: \"sharkLeftToRight\",\r\n                frameRate: 5,\r\n                repeat: -1,\r\n                frames: this.anims.generateFrameNumbers(CST.SPRITE.SHARK, {\r\n                    frames: [0, 1, 2, 1, 0]\r\n                })\r\n            })\r\n\r\n            this.anims.create({\r\n                key: \"sharkRightToLeft\",\r\n                frameRate: 5,\r\n                repeat: -1,\r\n                frames: this.anims.generateFrameNumbers(CST.SPRITE.SHARK, {\r\n                    frames: [3, 4, 5, 4, 3]\r\n                })\r\n            })\r\n\r\n            //*****************diver animation *****************\r\n            this.anims.create({\r\n                key: \"diverLeftToRight\",\r\n                frameRate: 6,\r\n                repeat: -1,\r\n                frames: this.anims.generateFrameNumbers(CST.SPRITE.DIVER, {\r\n                    frames: [0, 1, 2, 1, 0, 2]\r\n                })\r\n            })\r\n\r\n            this.anims.create({\r\n                key: \"diverRightToLeft\",\r\n                frameRate: 6,\r\n                repeat: -1,\r\n                frames: this.anims.generateFrameNumbers(CST.SPRITE.DIVER, {\r\n                    frames: [3, 4, 5, 4, 3, 5]\r\n                })\r\n            })\r\n\r\n            // *****bomb animation or direction change*******\r\n            this.anims.create({\r\n                key: \"bombRight\",\r\n                frameRate: 0,\r\n                frames: this.anims.generateFrameNumbers(CST.SPRITE.BOMB, {\r\n                    frames: [0]\r\n                })\r\n            })\r\n\r\n            this.anims.create({\r\n                key: \"bombLeft\",\r\n                frameRate: 0,\r\n                frames: this.anims.generateFrameNumbers(CST.SPRITE.BOMB, {\r\n                    frames: [1]\r\n                })\r\n            })\r\n\r\n            /***********Events****** */\r\n            makeSoundFx.on(\"sound\", this.soundFx, this); // sound event handler\r\n            diverRescued.on(\"rescued\", this.rescueEvent, this); // divers event handler\r\n            yPosArrayFunction.on(\"updateArray\", this.arrayFunction, this);// array event\r\n            updateScoreAndLives.on(\"scoreAndLives\", this.scoreAndLives, this); // update score and manage lives displayed\r\n        }\r\n\r\n        //******oxigen bar ****** */\r\n        oxigenBar = this.add.graphics({\r\n            fillStyle: {\r\n                color: 0x000FF // blue\r\n            }\r\n        });\r\n\r\n        oxigenBar.fillRect(380, 545, oxigenLevel, 18).setDepth(1);\r\n        // ************add  text***********\r\n\r\n        scoreText = this.add.text(16, 16, \"Score:\", { fontSize: \"24px\", fill: \"#000\" });\r\n        updateScoreAndLives.emit(\"scoreAndLives\", 0); // update score and display lives\r\n        this.add.text(280, 542, \"OXIGEN:\", { fontSize: \"24px\", fill: \"#000\" });\r\n\r\n        // ******** sound********\r\n        this.sound.play(CST.AUDIO.GAME_MUSIC, { // load main theme\r\n            loop: true,\r\n            volume: 0.2\r\n        });\r\n\r\n        //add player submarine**************\r\n        this.submarine = this.physics.add.sprite(400, 75, CST.SPRITE.SUBMARINE, 0).setScale(1);\r\n        this.submarine.setSize(80, 20).setOffset(6, 10);// change submarine hitbox size\r\n        this.submarine.body.customBoundsRectangle = new Phaser.Geom.Rectangle(0, 75, 800, 460);\r\n        this.submarine.body.setCollideWorldBounds(true);\r\n\r\n        //add enemy submarine****************\r\n        this.manyEnemies = this.physics.add.group();\r\n        this.manyEnemies.defaults.setImmovable = true; // group deafults\r\n        //this.manyEnemies.defaults.setBoundsRectangle = customBounds;\r\n\r\n        //submarine group****************\r\n        this.manySharks = this.physics.add.group();\r\n        this.manySharks.defaults.setImmovable = true; // group deafults\r\n        //this.manySharks.defaults.setCollideWorldBounds = true;\r\n        //this.manySharks.defaults.setBoundsRectangle = customBounds;\r\n\r\n        //divers group**************\r\n        this.manyDivers = this.physics.add.group();\r\n        //this.manyDivers.defaults.setImmovable = true;\r\n\r\n        //********group of divers saved***** */\r\n        this.diversSaved = this.add.group();\r\n\r\n        for (let i = 0; i < diversRescued; i++) {\r\n            diversXPos += 50;\r\n            this.diversSaved.add(this.add.sprite(diversXPos, 580, CST.SPRITE.DIVER, 0).setScale(0.15));\r\n        }\r\n\r\n        // bomb group*****************\r\n        this.manyBombs = this.physics.add.group();\r\n        this.manyBombs.defaults.setImmovable = true; // group deafults\r\n        //this.rightBombs.defaults.setCollideWorldBounds = true;\r\n        //this.rightBombs.defaults.setBoundsRectangle = new Phaser.Geom.Rectangle(0, 0, this.game.renderer.width, this.game.renderer.height);\r\n\r\n        // add a timed events\r\n        this.timedEvents();\r\n\r\n        // *************sprite colition******************\r\n\r\n        this.physics.add.collider(this.background, this.manyBombs, function (_background, manyBombs) { // left bomb collition detect\r\n\r\n            if (manyBombs.body.checkWorldBounds() == true) {// checks if the bombs are in the world bounds\r\n                manyBombs.destroy();// if not destroy bombs\r\n            }\r\n        });\r\n\r\n        this.physics.add.collider(this.submarine, this.manySharks, function (submarine, _shark) { // collition detect\r\n            submarine.active = false;\r\n        });\r\n\r\n        this.physics.add.collider(this.submarine, this.manyEnemies, function (submarine, _enemy) { // collition detect\r\n            submarine.active = false;\r\n        });\r\n\r\n        this.physics.add.collider(this.submarine, this.manyBombs, function (submarine, manyBombs) { // collition detect\r\n\r\n            if (manyBombs.tintTopLeft == 0xff0000) submarine.active = false;\r\n        });\r\n\r\n        this.physics.add.collider(this.manyDivers, this.manySharks, function (diver, shark) { // collition detect\r\n            const sharkVel = shark.body.velocity.x// take the shark velocity and transfer it to the kamikaze diver\r\n\r\n            if (diver.tintTopLeft == 0x0000FF) {\r\n                diver.body.setVelocityX(sharkVel);\r\n\r\n                if (sharkVel > 0) {// depending on the shark velocitcity is the kamikaze diver orientation\r\n                    diver.play(\"diverLeftToRight\");\r\n                } else {\r\n                    diver.play(\"diverRightToLeft\");\r\n                }\r\n            }\r\n        });\r\n\r\n        this.physics.add.collider(this.manyDivers, this.manyEnemies, function (diver, _enemies) { // collition detect\r\n\r\n            if (diver.tintTopLeft == 0x0000FF && diver.body.checkWorldBounds() == false) {// enemies will destroy kamikaze divers and rest points only in bounds\r\n                diver.destroy();\r\n                makeSoundFx.emit(\"sound\", 2);\r\n\r\n                if (score >= 20) updateScoreAndLives.emit(\"scoreAndLives\", -20);\r\n            }\r\n        });\r\n\r\n        this.physics.world.addCollider(this.manyDivers, this.manyDivers, function (diverOne, diverTwo) {// if divers collide with each other they go separated ways\r\n\r\n            if (diverOne.body.velocity.x > 0) {\r\n                diverOne.body.setVelocityX(100);\r\n                diverOne.play(\"diverLeftToRight\");\r\n            } else {\r\n                diverOne.body.setVelocityX(-100);\r\n                diverOne.play(\"diverRightToLeft\");\r\n            }\r\n\r\n            if (diverTwo.body.velocity.x > 0) {\r\n                diverTwo.body.setVelocityX(100);\r\n                diverTwo.play(\"diverLeftToRight\");\r\n            } else {\r\n                diverTwo.body.setVelocityX(-100);\r\n                diverTwo.play(\"diverRightToLeft\");\r\n            }\r\n\r\n            if (diverOne.tintTopLeft != 0x0000FF && diverTwo.tintTopLeft != 0x0000FF) diverOne.destroy(); //If both divers are the same color then one is destroyed\r\n        });\r\n\r\n        this.physics.add.overlap(this.manyDivers, this.manyBombs, function (diver, manyBombs) { // collition detect          \r\n            const bombsVel = manyBombs.body.velocity.x\r\n            diver.body.setVelocityX(bombsVel); // bombs force all divers to flee in oposite direction.\r\n\r\n            if (bombsVel > 0) {\r\n                diver.play(\"diverLeftToRight\");\r\n            } else {\r\n                diver.play(\"diverRightToLeft\");\r\n            }\r\n        });\r\n\r\n        diversCollider = this.physics.add.collider(this.manyDivers, this.submarine, function (_submarine, diver) { // collition detect\r\n            let thisScore = 10; // keep trak of normal divers score or kamikaze divers score\r\n\r\n            if (diver.tintTopLeft != 0x0000FF) {\r\n                yPosArrayFunction.emit(\"updateArray\", diver);// only update array with normal divers\r\n                thisScore += 10;// more score if it is a kamikaze diver\r\n            }\r\n            diver.destroy();\r\n            updateScoreAndLives.emit(\"scoreAndLives\", thisScore);\r\n            makeSoundFx.emit(\"sound\", 2);\r\n            diverRescued.emit(\"rescued\");\r\n\r\n            if (diversRescued == 6) diversCollider.active = false;// if the submarine is full of divers do not rescue more\r\n        });\r\n\r\n        this.physics.add.overlap(this.manySharks, this.manyBombs, function (manySharks, manyBombs) { // collition detect          \r\n\r\n            if (manyBombs.tintTopLeft != 0xFF0000) {// take color to separate player bombs vs enemy bombs\r\n                yPosArrayFunction.emit(\"updateArray\", manySharks);\r\n                manyBombs.destroy();\r\n                manySharks.destroy();\r\n                updateScoreAndLives.emit(\"scoreAndLives\", 5);\r\n                makeSoundFx.emit(\"sound\", 1);\r\n            }\r\n        });\r\n\r\n        this.physics.add.collider(this.manyEnemies, this.manyBombs, function (manyEnemies, manyBombs) { // collition detect\r\n\r\n            if (manyBombs.tintTopLeft != 0xFF0000 && manyEnemies.tintTopLeft != 0x800040) {// prevent killing of patrol sub\r\n                yPosArrayFunction.emit(\"updateArray\", manyEnemies);\r\n                manyBombs.destroy();\r\n                manyEnemies.destroy();\r\n                updateScoreAndLives.emit(\"scoreAndLives\", 10);\r\n                makeSoundFx.emit(\"sound\", 0);\r\n            }\r\n        });\r\n    }\r\n\r\n    timedEvents() {\r\n        incrementEnemiesVelocity = level * 2;\r\n        this.time.removeAllEvents();\r\n        this.time.addEvent({ delay: Phaser.Math.Between(2000, (3000 - incrementEnemiesVelocity)), callback: this.sharkEvent, callbackScope: this, loop: true }); // create a shark \r\n        this.time.addEvent({ delay: Phaser.Math.Between(4000, (5000 - incrementEnemiesVelocity)), callback: this.enemySubEvent, callbackScope: this, loop: true });// create a enemy sub\r\n        this.time.addEvent({ delay: Phaser.Math.Between(2000, (4000 - incrementEnemiesVelocity)), callback: this.enemySubFire, callbackScope: this, loop: false });// create a enemy sub fire event\r\n        this.time.addEvent({ delay: (6000 + incrementEnemiesVelocity), callback: this.diverEvent, callbackScope: this, loop: true });// create a diver\r\n        this.time.addEvent({ delay: 1000, callback: this.sharkWavePattern, callbackScope: this, loop: true });// create a diver\r\n        this.time.addEvent({ delay: 1000, callback: this.oxigenTimer, callbackScope: this, loop: true });// create a diver\r\n\r\n        if (level > 2) this.time.addEvent({ delay: Phaser.Math.Between(10000, (15000 - incrementEnemiesVelocity)), callback: this.patrolSubmarineEvent, callbackScope: this, loop: true });// create a enemy sub fire event\r\n    }\r\n\r\n    scoreAndLives(scoreToAdd) { // add score and manage lives\r\n        score += scoreToAdd;\r\n\r\n        if (score > extraLife) {\r\n            extraLife += 1000;\r\n            if (lives < 4) {\r\n                lives++;// every 1000 points add a new life if less than 4 \r\n            } else {\r\n                score += 100;// else give you bonus points\r\n            }\r\n        }\r\n        scoreText.setText(\"Score:\" + score);\r\n        let livesXPos = 740;\r\n\r\n        for (let x = lives; x > 0; x--) {\r\n            const submarineLives = this.add.sprite(livesXPos, 12, CST.SPRITE.SUBMARINE, 0).setScale(0.4);\r\n            livesXPos -= (submarineLives.displayWidth * 1.1);\r\n        }\r\n    }\r\n\r\n    arrayFunction(object) {\r\n        yPosArray.sort(function (a, b) { return a - b });// arrange numbers in acending order\r\n\r\n        if (yPosArray[0] == 0) yPosArray[0] = (Math.round(object.body.center.y / 100) * 100) + 20;\r\n    }\r\n\r\n    //*****Create sound effects********* */\r\n    soundFx(effect) {// emits one time sounds no repeat\r\n        switch (effect) {\r\n            case 0:\r\n                this.sound.play(CST.AUDIO.ENEMY_SOUND);// enemy killed\r\n                break;\r\n            case 1:\r\n                this.sound.play(CST.AUDIO.SHARK_SOUND);// shark killed\r\n                break;\r\n            case 2:\r\n                this.sound.play(CST.AUDIO.DIVER_SOUND);// diver rescued sound\r\n                break;\r\n            case 3:\r\n                this.sound.play(CST.AUDIO.OXIGEN);//oxigen refill sound\r\n                break;\r\n        }\r\n    }\r\n\r\n    /******Dispay number of divers rescued on screen******** */\r\n    rescueEvent() {\r\n\r\n        if (!submarineOnSurface && this.diversSaved.getLength() < 6) {\r\n            diversToRescue = 1;\r\n            diversRescued++;\r\n            diversXPos += 50;\r\n            this.diversSaved.add(this.add.sprite(diversXPos, 580, CST.SPRITE.DIVER, 0).setScale(0.15));\r\n\r\n            if (diversRescued == 6) {// if 6 divers are rescued emit a \"ding\"\r\n                this.sound.play(CST.AUDIO.RESCUE_COMPLETED);\r\n                diversToRescue = 6;\r\n            }\r\n        } else if (submarineOnSurface && diversToRescue > 0) {\r\n\r\n            if (diversRescued == 6) {\r\n\r\n                if (level < 30) level++; // advance to next level if there are 6 divers rescued    \r\n                updateScoreAndLives.emit(\"scoreAndLives\", 50); // gives 50 points if all divers are recued\r\n                this.timedEvents();\r\n            }\r\n            diversXPos -= 50;\r\n            diversToRescue--;\r\n            diversRescued--;\r\n            const getDivers = this.diversSaved.getChildren();\r\n            this.diversSaved.remove(getDivers[diversRescued], true, true);\r\n        }\r\n    }\r\n\r\n    /********Oxigen bar timer******** */\r\n    oxigenTimer() {\r\n\r\n        if (submarineOnSurface && pausePlayer) {// if submarine is on surface oxigen is refilled \r\n            diverRescued.emit(\"rescued\");\r\n\r\n            if (oxigenLevel < 100) {\r\n                oxigenLevel += 15; // recharge oxigen\r\n            }\r\n\r\n            if (oxigenLevel > 30) {// retrun oxigenbar to is origianl color\r\n                oxigenBar.clear();\r\n                oxigenBar.defaultFillColor = 0x000FF;\r\n            }\r\n\r\n            if (oxigenLevel > 100) {\r\n                oxigenLevel = 100;\r\n            }\r\n\r\n            if (diversToRescue == 0 && oxigenLevel == 100) {\r\n                diversCollider.active = true;// reenable divers rescue collider\r\n                pausePlayer = false;// unpause player\r\n                this.sound.stopByKey(CST.AUDIO.OXIGEN);// stop oxigen refill sound\r\n                this.sound.removeByKey(CST.AUDIO.OXIGEN_LOW);// stop oxigen refill sound\r\n                this.sound.resumeAll();// resume music\r\n            } else {\r\n                makeSoundFx.emit(\"sound\", 3);// oxigen refill\r\n            }\r\n        }\r\n\r\n        if (!submarineOnSurface) {// if the submarine is underwater oxigen is consumed\r\n            oxigenBar.clear();\r\n\r\n            if (oxigenLevel -= 2, oxigenLevel < 1) { // if no oxigen left end game.\r\n                this.endGame();\r\n            }\r\n\r\n            if (oxigenLevel == 30) {\r\n                oxigenBar.defaultFillColor = 0xFF0000;\r\n                this.sound.play(CST.AUDIO.OXIGEN_LOW, { // load main theme\r\n                    loop: true,\r\n                    volume: 0.3\r\n                });\r\n            }\r\n        }\r\n        oxigenBar.fillRect(380, 545, oxigenLevel, 18).setDepth(1);\r\n    }\r\n\r\n    updateBodies() { // check if the place if already in use by another body\r\n\r\n        for (let i = 0; i < this.manySharks.getLength(); i++) {\r\n\r\n            if (getShark[i].x < 0 || getShark[i].x > this.game.renderer.width) {  // looping the array to destroy sharks that are out of bounds.\r\n                yPosArrayFunction.emit(\"updateArray\", getShark[i]);\r\n                getShark[i].destroy();\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < this.manyEnemies.getLength(); i++) {\r\n\r\n            if (getEnemy[i].x < 0 || getEnemy[i].x > this.game.renderer.width) {  // looping the array to destroy sharks that are out of bounds.\r\n\r\n                if (getEnemy[i].tintTopLeft != 0xFF0012) yPosArrayFunction.emit(\"updateArray\", getEnemy[i]);// only update the array with normal enemies, other color enemies are not taken in account (like the patrol submarine)\r\n                getEnemy[i].destroy();\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < this.manyDivers.getLength(); i++) {\r\n\r\n            if (getDiver[i].x < 0 || getDiver[i].x > this.game.renderer.width) {  // looping the array to destroy sharks that are out of bounds.\r\n\r\n                if (getDiver[i].tintTopLeft != 0x0000FF) yPosArrayFunction.emit(\"updateArray\", getDiver[i]);// only update normal divers not kamikaze ones\r\n                getDiver[i].destroy();\r\n            }\r\n        }\r\n    }\r\n\r\n    //************Timed events**************** */\r\n    sharkEvent() { // callback shark timed event\r\n        this.updateBodies();\r\n\r\n        for (let index = 0; index < yPosArray.length; index++) {\r\n\r\n            if (yPosArray[index] != 0) {\r\n                const sharkGroupLength = this.manySharks.getLength();\r\n                this.manySharks.add(this.physics.add.sprite(0, 0, CST.SPRITE.SHARK, 0).setScale(0.15).setVisible(false));\r\n                getShark = this.manySharks.getChildren(); // get all children of the group \r\n\r\n                if (Phaser.Math.Between(0, 10) % 2 == 0) {\r\n                    getShark[sharkGroupLength].body.reset(-getShark[sharkGroupLength].body.halfWidth, yPosArray[index]);\r\n                    getShark[sharkGroupLength].body.setVelocityX(120 + incrementEnemiesVelocity);\r\n                    this.anims.play(\"sharkLeftToRight\", getShark[sharkGroupLength]);\r\n                } else {\r\n                    getShark[sharkGroupLength].body.reset(this.game.renderer.width + getShark[sharkGroupLength].body.halfWidth, yPosArray[index]);\r\n                    getShark[sharkGroupLength].body.setVelocityX(-120 - incrementEnemiesVelocity);\r\n                    this.anims.play(\"sharkRightToLeft\", getShark[sharkGroupLength])\r\n                }\r\n                getShark[sharkGroupLength].setVisible(true);\r\n\r\n                if (level > 2) {\r\n                    getShark[sharkGroupLength].tint = 0xFF0000; // change shark color to red from the 3er level and up\r\n\r\n                    if (Phaser.Math.Between(0, 2) == 0) this.kamikazeDiver(getShark[sharkGroupLength]);// spawn a kamikaze diver.\r\n                }\r\n                yPosArray[index] = 0;// 0 in index means no body is allowed to spawn in that location\r\n            }\r\n        }\r\n    }\r\n\r\n    sharkWavePattern() {\r\n\r\n        for (let i = 0; i < this.manySharks.getLength(); i++) { // make sharks move up and down\r\n            if (getShark[i].body.velocity.y > 0) {\r\n                getShark[i].body.setVelocityY(-10);\r\n            } else {\r\n                getShark[i].body.setVelocityY(10);\r\n            }\r\n        }\r\n    }\r\n    //***** Enemy submarine events******** */\r\n    enemySubEvent() {\r\n        this.updateBodies();\r\n\r\n        for (let index = 0; index < yPosArray.length; index++) {\r\n\r\n            if (yPosArray[index] != 0) {\r\n                const enemiesGroupLength = this.manyEnemies.getLength();\r\n                this.manyEnemies.add(this.physics.add.sprite(0, 0, CST.SPRITE.SUBMARINE, 0).setScale(0.8).setSize(90, 25).setOffset(0, 6).setVisible(false));\r\n                getEnemy = this.manyEnemies.getChildren(); // get all children of the group \r\n                getEnemy[enemiesGroupLength].tint = 0xFF0000; // change the color to red\r\n\r\n                if (Phaser.Math.Between(0, 1) == 0) {// if the number is even\r\n                    getEnemy[enemiesGroupLength].body.reset(-getEnemy[enemiesGroupLength].body.halfWidth, yPosArray[index]);\r\n                    getEnemy[enemiesGroupLength].body.setVelocityX(100 + incrementEnemiesVelocity);\r\n                    this.anims.play(\"left\", getEnemy[enemiesGroupLength]);\r\n                } else {\r\n                    getEnemy[enemiesGroupLength].body.reset(this.game.renderer.width + getEnemy[enemiesGroupLength].body.halfWidth, yPosArray[index]);\r\n                    getEnemy[enemiesGroupLength].body.setVelocityX(-100 - incrementEnemiesVelocity);\r\n                    this.anims.play(\"right\", getEnemy[enemiesGroupLength]);\r\n                }\r\n                getEnemy[enemiesGroupLength].setVisible(true);\r\n                yPosArray[index] = 0; // 0 in index means no body is allowed to spawn in that location\r\n            }\r\n        }\r\n    }\r\n\r\n    enemySubFire() {\r\n        this.time.addEvent({ delay: Phaser.Math.Between(1000, (6000 - incrementEnemiesVelocity)), callback: this.enemySubFire, callbackScope: this, loop: false });// create a enemy sub fire event\r\n        getEnemy = this.manyEnemies.getChildren(); // get all children of the group  \r\n\r\n        for (let i = 0; i < this.manyEnemies.getLength(); i++) {\r\n            const bombsGroupLength = this.manyBombs.getLength();\r\n            this.manyBombs.add(this.physics.add.sprite(0, 0, CST.SPRITE.BOMB, 0).setScale(0.10).setVisible(false));\r\n            const getBomb = this.manyBombs.getChildren(); // get all children of the group \r\n            getBomb[bombsGroupLength].tint = 0xFF0000;\r\n\r\n            if (getEnemy[i].body.velocity.x == (-100 - incrementEnemiesVelocity) && getEnemy[i].tintTopLeft != 0xFF0012) {/// get enemy direction to fire the bomb correctly and prevent the patrol sub from firing\r\n                getBomb[bombsGroupLength].body.reset(getEnemy[i].x - getEnemy[i].body.halfWidth, getEnemy[i].y);\r\n                getBomb[bombsGroupLength].body.setVelocityX(-200 - incrementEnemiesVelocity);\r\n                this.anims.play(\"bombLeft\", getBomb[bombsGroupLength]);\r\n            } else if (getEnemy[i].body.velocity.x == (100 + incrementEnemiesVelocity)) {/// get enemy direction\r\n                getBomb[bombsGroupLength].body.reset(getEnemy[i].x + getEnemy[i].body.halfWidth, getEnemy[i].y);\r\n                getBomb[bombsGroupLength].body.setVelocityX(200 + incrementEnemiesVelocity);\r\n                this.anims.play(\"bombRight\", getBomb[bombsGroupLength]);\r\n            }\r\n            getBomb[bombsGroupLength].setVisible(true);\r\n        }\r\n    }\r\n\r\n    patrolSubmarineEvent() {\r\n\r\n        if (submarineOnSurface == true) return; // only generate the patrol submarine if the player is not on surface\r\n        this.manyEnemies.add(this.physics.add.sprite(this.game.renderer.width, 80, CST.SPRITE.SUBMARINE, 0).setScale(0.8).setSize(90, 25).setOffset(0, 6));\r\n        getEnemy = this.manyEnemies.getChildren(); // get all children of the group \r\n        const enemiesGroupLength = (this.manyEnemies.getLength() - 1);\r\n        getEnemy[enemiesGroupLength].body.setVelocityX(-100);\r\n        getEnemy[enemiesGroupLength].tint = 0xFF0012; // change the color to light red\r\n        this.anims.play(\"right\", getEnemy[enemiesGroupLength]);\r\n    }\r\n\r\n    diverEvent() {\r\n        this.updateBodies();\r\n\r\n        for (let index = 0; index < yPosArray.length; index++) {\r\n\r\n            if (yPosArray[index] != 0) {\r\n                const diversGroupLength = this.manyDivers.getLength();\r\n                this.manyDivers.add(this.physics.add.sprite(0, 0, CST.SPRITE.DIVER, 0).setScale(0.15).setVisible(false));\r\n                getDiver = this.manyDivers.getChildren(); // get all children of the group \r\n\r\n                if (Phaser.Math.Between(0, 10) % 2 == 0) {\r\n                    getDiver[diversGroupLength].body.reset(-getDiver[diversGroupLength].body.halfWidth, yPosArray[index]);\r\n                    getDiver[diversGroupLength].body.setVelocityX(100 + incrementEnemiesVelocity);\r\n                    this.anims.play(\"diverLeftToRight\", getDiver[diversGroupLength]);\r\n                } else {\r\n                    getDiver[diversGroupLength].body.reset(this.game.renderer.width + getDiver[diversGroupLength].body.halfWidth, yPosArray[index]);\r\n                    getDiver[diversGroupLength].body.setVelocityX(-100 - incrementEnemiesVelocity);\r\n                    this.anims.play(\"diverRightToLeft\", getDiver[diversGroupLength]);\r\n                }\r\n                yPosArray[index] = 0;\r\n                getDiver[diversGroupLength].setVisible(true);\r\n\r\n                if (diversGroupLength > 3) return;// do not allow more than 3 divers at onece\r\n            }\r\n        }\r\n    }\r\n\r\n    kamikazeDiver(sharkBody) {\r\n        const diversGroupLength = this.manyDivers.getLength();\r\n        const sharkRight = sharkBody.body.right;\r\n        const sharkLeft = sharkBody.body.left;\r\n        const sarkHalfWidth = sharkBody.body.halfWidth;\r\n        const sharkCenterY = sharkBody.body.center.y;\r\n\r\n        if (sharkBody.body.velocity.x == (-120 - incrementEnemiesVelocity) && sharkRight > this.game.renderer.width) {/// get enemy direction to fire the bomb correctly and prevent the patrol sub from firing\r\n            this.manyDivers.add(this.physics.add.sprite((sharkLeft - sarkHalfWidth), sharkCenterY, CST.SPRITE.DIVER, 0).setScale(0.15));\r\n        } else if (sharkBody.body.velocity.x == (120 + incrementEnemiesVelocity) && sharkLeft < 0) {/// get enemy direction to fire the bomb correctly and prevent the patrol sub from firing)\r\n            this.manyDivers.add(this.physics.add.sprite((sharkRight + sarkHalfWidth), sharkCenterY, CST.SPRITE.DIVER, 0).setScale(0.15));\r\n        }\r\n        getDiver = this.manyDivers.getChildren(); // get all children of the group \r\n        getDiver[diversGroupLength].tint = 0x0000FF;\r\n    }\r\n\r\n    endGame() {\r\n        this.input.shutdown();\r\n        this.sound.removeByKey(CST.AUDIO.GAME_MUSIC);// stop oxigen refill sound\r\n        this.submarine.tint = 0x000000; // change submarine color to black\r\n\r\n        if (lives > 0) {\r\n\r\n            if (diversRescued > 0) diversRescued--;\r\n            lives--; // rest one live\r\n            continueGame = true;\r\n        } else {\r\n            lives = 3;// reset lives\r\n            extraLife = 1000; //reset extra life bonus\r\n            diversRescued = 0;\r\n            continueGame = false;\r\n        }\r\n        this.scene.pause(CST.SCENES.PLAY);// stop current scene\r\n        this.scene.run(CST.SCENES.END, { finalScore: score, gameLevel: level, continue: continueGame });// go to score scene*/\r\n    }\r\n\r\n    update(time, delta) {// delta 16.6666 @60fps\r\n\r\n        //*********player movement******** */\r\n        if (this.submarine.active == true) { // inputs only ative while player is alive\r\n\r\n            if (!submarineOnSurface && this.submarine.body.onCeiling() == true && this.submarine.body.y < 76) {// checks if the bombs are in the world bounds\r\n\r\n                if (!submarineOnSurface && this.diversSaved.getLength() == 0) {// if the submarine reaches the surface without any diver end game\r\n                    this.endGame();\r\n                }\r\n                submarineOnSurface = true;\r\n                pausePlayer = true;\r\n                this.submarine.setVelocityY(0);\r\n                this.submarine.setVelocityX(0);\r\n                this.sound.pauseAll();// stop music\r\n            }\r\n\r\n            if (pausePlayer) return;// if refilling oxigen the submarine isn´t movable\r\n\r\n            if (actionKeyRepeat == true && (actionKey == true || actionKey.isDown == true)) {\r\n                actionKeyRepeat = false;\r\n                this.sound.play(CST.AUDIO.PLAYER_FIRE_SOUND);\r\n                const getBomb = this.manyBombs.getChildren(); // get all children of the group \r\n                const bombsGroupLength = this.manyBombs.getLength();\r\n\r\n                if (actionKey == true) actionKey = false;\r\n\r\n                if (playerDirection == 1) {\r\n                    this.manyBombs.add(this.physics.add.sprite(this.submarine.body.center.x + this.submarine.body.halfWidth, this.submarine.body.center.y, CST.SPRITE.BOMB, 0).setScale(0.08));\r\n                    getBomb[bombsGroupLength].body.setVelocityX(220);\r\n                    this.anims.play(\"bombRight\", getBomb[bombsGroupLength]);\r\n                } else {\r\n                    this.manyBombs.add(this.physics.add.sprite(this.submarine.body.center.x - this.submarine.body.halfWidth, this.submarine.body.center.y, CST.SPRITE.BOMB, 0).setScale(0.08));\r\n                    getBomb[bombsGroupLength].body.setVelocityX(-220);\r\n                    this.anims.play(\"bombLeft\", getBomb[bombsGroupLength]);\r\n                }\r\n                this.time.delayedCall(500, () => {\r\n                    if (actionKeyRepeat == false) actionKeyRepeat = true;\r\n                });\r\n            }\r\n\r\n            if (this.controls.right.isDown == true) { // left submarine  sprite movement\r\n                this.submarine.setVelocityX(submarineSpeed);\r\n                this.submarine.play(\"left\", true);\r\n                playerDirection = 1;\r\n            }\r\n\r\n            if (this.controls.left.isDown == true) { // right submarine sprite movement\r\n                this.submarine.setVelocityX(-submarineSpeed);\r\n                this.submarine.play(\"right\", true);\r\n                playerDirection = -1;\r\n            }\r\n\r\n            if ((this.controls.left.isUp && this.controls.right.isUp)) { // not moving on x axis\r\n                this.submarine.setVelocityX(0);\r\n            }\r\n\r\n            if (this.controls.up.isDown == true) { // up submarine  sprite movement              \r\n                this.submarine.setVelocityY(-submarineSpeed);\r\n            }\r\n\r\n            if (this.controls.up.isUp && this.controls.down.isUp) { // not moving on x axis\r\n                this.submarine.setVelocityY(0);\r\n            }\r\n\r\n            if (this.controls.down.isDown == true && this.submarine.body.onFloor() == false) { // down submarine sprite movement\r\n                this.submarine.setVelocityY(submarineSpeed);\r\n                submarineOnSurface = false;\r\n            }\r\n\r\n        } else {\r\n            this.endGame();\r\n        }\r\n\r\n        if (escKey.isDown == true) {\r\n            score = 0;\r\n            this.scene.stop(CST.SCENES.PLAY);\r\n            this.scene.run(CST.SCENES.MENU);\r\n        }\r\n    }\r\n}\r\n","import { CST } from \"../CST\";\r\nlet score = 0;\r\nlet level = 0;\r\nlet restart = true;\r\nlet continueGame = false;\r\n\r\nexport class EndScene extends Phaser.Scene {\r\n\r\n    constructor() {\r\n        super({ key: CST.SCENES.END });\r\n    }\r\n    init(data) {\r\n        score = data.finalScore;\r\n        level = data.gameLevel;\r\n        continueGame = data.continue;\r\n    }\r\n\r\n    preload() {\r\n        this.sound.stopAll(); // stops menu sound \r\n        this.sound.play(CST.AUDIO.END_SOUND);\r\n    }\r\n\r\n    create() {\r\n\r\n        if (continueGame == true) {\r\n            this.time.delayedCall(2000, () => {\r\n                this.scene.start(CST.SCENES.PLAY, { gameLevel: level, sceneRestart: restart, resetScore: score });// restart play scene\r\n            });\r\n        } else {\r\n            this.add.image(0, 0, CST.IMAGE.END_BG).setOrigin(0).setDepth(0);// background\r\n            let playButton = this.add.image(this.game.renderer.width / 2, this.game.renderer.height / 2.3, CST.IMAGE.PLAY).setDepth(1);\r\n            let scoreText = this.add.text(285, 100, \"Final Score:\", { fontSize: \"32px\", fill: \"#FFF\" });\r\n            scoreText.setText(\"Final   Score:\" + score);\r\n            score = 0; //reset score\r\n\r\n            // make buttons interactive\r\n            playButton.setInteractive();\r\n\r\n            playButton.on(\"pointerup\", () => {\r\n                //this.sys.game.destroy(true); // end game and exit\r\n                score = 0;\r\n                this.scene.sleep(CST.SCENES.END);\r\n                this.scene.start(CST.SCENES.PLAY, { gameLevel: level, sceneRestart: restart, resetScore: score });// restart play scene\r\n            })\r\n        }\r\n        this.controls = this.input.keyboard.addKeys(\"enter\");// keyboard keys\r\n    }\r\n\r\n    update(time, delta) {\r\n\r\n        if (this.controls.enter.isDown == true) {// use enter key to restart game\r\n            this.scene.sleep(CST.SCENES.END);\r\n            this.scene.start(CST.SCENES.PLAY, { gameLevel: level, sceneRestart: restart, resetScore: score });// restart play scene\r\n        }\r\n    }\r\n}\r\n\r\n","/** @type {import(\"../typings/phaser\")} */\r\n\r\nimport { LoadScene } from \"./scenes/LoadScene\";\r\nimport { MenuScene } from \"./scenes/MenuScene\";\r\nimport { PlayScene } from \"./scenes/PlayScene\";\r\nimport { EndScene } from \"./scenes/EndScene\";\r\n\r\nlet game = new Phaser.Game({\r\n    scene: [\r\n        LoadScene, MenuScene, PlayScene, EndScene\r\n    ],\r\n    render: {\r\n        pixelArt: true\r\n    },\r\n    scale: {\r\n        autoCenter: Phaser.Scale.CENTER_BOTH,\r\n        mode: Phaser.Scale.FIT, // use FIT to center preserving aspect ratio or AUTO to fullscreen without preserving aspect\r\n        width: 800,\r\n        height: 600\r\n    },\r\n    physics: {\r\n        default: \"arcade\",\r\n        arcade: {\r\n            debug: false,\r\n            debugShowBody: false, // show hitbox \r\n            debugShowStaticBody: false\r\n        }\r\n    }\r\n});\r\n"]}