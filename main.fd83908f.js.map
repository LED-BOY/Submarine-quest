{"version":3,"sources":["src/CST.js","src/scenes/LoadScene.js","src/scenes/MenuScene.js","src/scenes/PlayScene.js","src/scenes/EndScene.js","src/main.js"],"names":["CST","SCENES","LOAD","MENU","PLAY","END","IMAGE","LOGO","OPTIONS","TITLE","GAME_BG","END_BG","FIRE_BUTTON","AUDIO","GAME_MUSIC","DIVER_SOUND","ENEMY_SOUND","SHARK_SOUND","PLAYER_FIRE_SOUND","END_SOUND","NEW_SOUND","OXIGEN","OXIGEN_LOW","RESCUE_COMPLETED","RESCUE_SEQUENCE","SPRITE","SUBMARINE","SHARK","DIVER","BOMB","exports","_CST","require","_typeof","o","Symbol","iterator","constructor","prototype","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","_toPropertyKey","key","_createClass","protoProps","staticProps","arg","_toPrimitive","String","input","hint","prim","toPrimitive","undefined","res","call","Number","_inherits","subClass","superClass","create","value","_setPrototypeOf","p","setPrototypeOf","bind","__proto__","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","result","_getPrototypeOf","NewTarget","Reflect","construct","arguments","apply","_possibleConstructorReturn","self","_assertThisInitialized","ReferenceError","sham","Proxy","Boolean","e","valueOf","getPrototypeOf","LoadScene","_Phaser$Scene","Phaser","Scene","_super","prop","load","setPath","image","audio","spritesheet","frameWidth","frameHeight","_this","loadSprites","loadAudio","loadImages","loadingBar","add","graphics","fillStyle","color","on","percent","fillRect","game","renderer","height","width","console","log","file","src","scene","stop","start","MenuScene","sound","stopAll","setDepth","setOrigin","playButton","hoverSprite","sprite","x","y","setScale","pauseOnBlur","play","loop","volume","controls","keyboard","addKeys","anims","frameRate","repeat","frames","generateFrameNumbers","setInteractive","setVisible","run","time","delta","enter","isDown","playerDirection","submarineOnSurface","submarineSpeed","oxigenLevel","oxigenBar","pausePlayer","diversXPos","diversToRescue","diversRescued","getShark","getEnemy","getDiver","yPosArray","incrementEnemiesVelocity","diverRescued","Events","EventEmitter","makeSoundFx","yPosArrayFunction","updateScoreAndLives","lives","score","scoreText","extraLife","level","sceneInit","actionKey","actionKeyRepeat","continueGame","PlayScene","data","initVariables","sceneRestart","gameLevel","resetScore","plugin","background","physics","sys","device","touch","joyStick","plugins","get","radius","base","circle","thumb","dir","forceMin","fixed","enable","createCursorKeys","fireButton","addPointer","addKey","xForExit","text","fontSize","fill","fontFamily","end","soundFx","rescueEvent","arrayFunction","scoreAndLives","emit","submarine","setSize","setOffset","body","customBoundsRectangle","Geom","Rectangle","setCollideWorldBounds","manyEnemies","group","defaults","setImmovable","manySharks","manyDivers","diversSaved","manyBombs","timedEvents","collider","_background","checkWorldBounds","destroy","_shark","active","_enemy","tintTopLeft","diver","shark","sharkVel","velocity","setVelocityX","enemies","world","addCollider","diverOne","diverTwo","bombsVel","_submarine","thisScore","removeAllEvents","addEvent","delay","Math","Between","callback","sharkEvent","callbackScope","enemySubEvent","enemySubFire","diverEvent","oxigenTimer","patrolSubmarineEvent","scoreToAdd","setText","livesXPos","displayWidth","object","sort","a","b","round","center","effect","getLength","getDivers","getChildren","remove","clear","defaultFillColor","stopByKey","removeByKey","resumeAll","endGame","updateBodies","index","sharkGroupLength","reset","tint","kamikazeDiver","enemiesGroupLength","getBomb","bombsGroupLength","left","halfWidth","right","diversGroupLength","shutdown","pause","finalScore","continue","onCeiling","setVelocityY","pauseAll","delayedCall","isUp","up","down","esc","restart","EndScene","sleep","_LoadScene","_MenuScene","_PlayScene","_EndScene","Game","render","pixelArt","scale","autoCenter","Scale","CENTER_BOTH","mode","FIT","default","arcade","debug","debugShowBody","debugShowStaticBody"],"mappings":"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","file":"main.fd83908f.js","sourceRoot":"..","sourcesContent":["export const CST = {\r\n    SCENES: {\r\n        LOAD: \"LOAD\",\r\n        MENU: \"MENU\",\r\n        PLAY: \"PLAY\",\r\n        END: \"END\"\r\n    },\r\n    IMAGE: {\r\n        LOGO: \"logo.png\",\r\n        OPTIONS: \"options_button.png\",\r\n        PLAY: \"play_button.png\",\r\n        TITLE: \"title_bg.png\",\r\n        GAME_BG: \"game_bg.png\",\r\n        END_BG: \"end_bg.png\",\r\n        FIRE_BUTTON: \"fire_button.png\"\r\n    },\r\n    AUDIO: {\r\n        TITLE: \"menu_theme.mp3\",\r\n        GAME_MUSIC: \"main_theme.mp3\",\r\n        DIVER_SOUND: \"diver_rescued.ogg\",\r\n        ENEMY_SOUND: \"enemy_sub_destroyed.ogg\",\r\n        SHARK_SOUND: \"shark_killed.ogg\",\r\n        PLAYER_FIRE_SOUND: \"fire_sound.ogg\",\r\n        END_SOUND: \"gameover.ogg\",\r\n        NEW_SOUND: \"new_game.ogg\",\r\n        OXIGEN: \"oxigen_refill.ogg\",\r\n        OXIGEN_LOW: \"oxigen_low.ogg\",\r\n        RESCUE_COMPLETED: \"rescue_completed.ogg\",\r\n        RESCUE_SEQUENCE: \"rescue_sequence.ogg\"\r\n    },\r\n    SPRITE: {\r\n        SUBMARINE: \"submarine.png\",\r\n        SHARK: \"shark.png\",\r\n        DIVER: \"diver.png\",\r\n        BOMB: \"bomb.png\"\r\n    }\r\n}","import { CST } from \"../CST\";\r\nexport class LoadScene extends Phaser.Scene {\r\n    constructor() {\r\n        super({\r\n            key: CST.SCENES.LOAD\r\n        })\r\n    }\r\n    init() {\r\n\r\n    }\r\n\r\n    loadImages() {// load all images at once\r\n        this.load.setPath(\"./assets/image\");\r\n\r\n        for (let prop in CST.IMAGE) {\r\n            this.load.image(CST.IMAGE[prop], CST.IMAGE[prop]);\r\n        }\r\n    }\r\n\r\n    loadAudio() { // load all audio at once\r\n        this.load.setPath(\"./assets/audio\");\r\n\r\n        for (let prop in CST.AUDIO) {\r\n            this.load.audio(CST.AUDIO[prop], CST.AUDIO[prop]);\r\n        }\r\n    }\r\n\r\n    loadSprites() {  // if all sprites are the same size load all at once\r\n        this.load.setPath(\"./assets/sprite\");\r\n\r\n        this.load.spritesheet(CST.SPRITE.SUBMARINE, CST.SPRITE.SUBMARINE, { frameWidth: 96, frameHeight: 33});\r\n        this.load.spritesheet(CST.SPRITE.SHARK, CST.SPRITE.SHARK, { frameWidth: 455, frameHeight: 232});\r\n        this.load.spritesheet(CST.SPRITE.DIVER, CST.SPRITE.DIVER, { frameWidth: 320, frameHeight: 219});\r\n        this.load.spritesheet(CST.SPRITE.BOMB, CST.SPRITE.BOMB, { frameWidth: 288, frameHeight: 210});\r\n    }\r\n\r\n    preload() {\r\n\r\n        this.loadSprites();\r\n\r\n        this.loadAudio();\r\n\r\n        this.loadImages();\r\n        //create loading bar\r\n\r\n        let loadingBar = this.add.graphics({\r\n            fillStyle: {\r\n                color: 0xffffff // white\r\n            }\r\n        })\r\n        // simulate large load\r\n\r\n        // loader event\r\n\r\n        this.load.on(\"progress\", (percent) => {\r\n            loadingBar.fillRect(0, this.game.renderer.height / 2, this.renderer.width * percent, 50);\r\n            console.log(percent);\r\n        })\r\n\r\n        this.load.on(\"complete\", () => {\r\n        });\r\n\r\n        this.load.on(\"load\", (file) => {\r\n            console.log(file.src)\r\n        })\r\n    }\r\n    create() {\r\n        this.scene.stop(CST.SCENES.LOAD);\r\n        this.scene.start(CST.SCENES.MENU);\r\n    }\r\n}","import { CST } from \"../CST\";\r\n\r\nexport class MenuScene extends Phaser.Scene {\r\n    constructor() {\r\n        super({\r\n            key: CST.SCENES.MENU\r\n        })\r\n    }\r\n    init() {\r\n    }\r\n\r\n    preload() {\r\n        this.sound.stopAll(); // stops menu sound \r\n    }\r\n\r\n    create() { // create menu image\r\n        console.log(\"title loading\");\r\n        // creates in z order\r\n\r\n        this.add.image(this.game.renderer.width / 2, this.game.renderer.height * 0.20, CST.IMAGE.LOGO).setDepth(1);\r\n        this.add.image(0, 0, CST.IMAGE.TITLE).setOrigin(0).setDepth(0);\r\n\r\n        //set button to a variable\r\n        let playButton = this.add.image(this.game.renderer.width / 2, this.game.renderer.height / 2, CST.IMAGE.PLAY).setDepth(1);\r\n        //this.add.image(this.game.renderer.width / 2, this.game.renderer.height / 2 + 100, CST.IMAGE.OPTIONS).setDepth(1);\r\n        let hoverSprite = this.add.sprite((playButton.x - playButton.width), playButton.y, CST.SPRITE.SUBMARINE).setScale(1);\r\n\r\n        //play music\r\n        this.sound.pauseOnBlur = false; // play audio even when out of focus.\r\n        this.sound.play(CST.AUDIO.TITLE, {\r\n            loop: true,\r\n            volume: 0.8\r\n        })\r\n\r\n        this.controls = this.input.keyboard.addKeys(\"up, down, left, right, space, enter\");// keyboard keys\r\n\r\n        // create animation\r\n        this.anims.create({\r\n            key: \"animSubmarine\",\r\n            frameRate: 3,\r\n            repeat: -1,// forever\r\n            frames: this.anims.generateFrameNumbers(CST.SPRITE.SUBMARINE, {\r\n                frames: [0, 1, 2]\r\n            })\r\n        })\r\n        hoverSprite.play(\"animSubmarine\");\r\n\r\n        // make buttons interactive\r\n        playButton.setInteractive();\r\n\r\n        playButton.on(\"pointerover\", () => {\r\n            console.log(\"hovering\")\r\n            hoverSprite.setVisible(true);\r\n            hoverSprite.play(\"animSubmarine\");\r\n            hoverSprite.x = playButton.x - playButton.width;\r\n            hoverSprite.y = playButton.y;\r\n        })\r\n\r\n        playButton.on(\"pointerout\", () => {\r\n            console.log(\"out of here\")\r\n            hoverSprite.setVisible(false);\r\n        })\r\n\r\n        playButton.on(\"pointerup\", () => {\r\n            console.log(\"Play\")\r\n            this.scene.stop(CST.SCENES.MENU);\r\n            this.scene.run(CST.SCENES.PLAY);\r\n        })\r\n\r\n    }\r\n\r\n    update(time, delta) {\r\n\r\n        if (this.controls.enter.isDown == true) {// use enter key to start game\r\n            this.scene.stop(CST.SCENES.MENU);\r\n            this.scene.run(CST.SCENES.PLAY);\r\n        }\r\n    }\r\n}","import { CST } from \"../CST\";\r\n//********NPCs variables */\r\nlet diversToRescue = 0;\r\nlet diversRescued = 0;\r\nvar getShark = 0; // shark childrens\r\nvar getEnemy = 0; // enemies childrens \r\nvar getDiver = 0;// divers children\r\nlet yPosArray = [120, 220, 320, 420, 520];\r\nlet incrementEnemiesVelocity = 0;\r\nconst diverRescued = new Phaser.Events.EventEmitter();// new event \r\nconst makeSoundFx = new Phaser.Events.EventEmitter();// new event \r\nconst yPosArrayFunction = new Phaser.Events.EventEmitter();// new event \r\nconst updateScoreAndLives = new Phaser.Events.EventEmitter();// new event \r\n//****player variables ********\r\nlet playerDirection; // -1 is left and 1 is right\r\nlet submarineOnSurface;\r\nlet submarineSpeed;\r\nlet oxigenLevel;\r\nvar oxigenBar;\r\nlet pausePlayer;\r\nlet diversXPos;\r\nlet lives = 3;\r\n//********other variables */\r\nlet score = 0;\r\nvar scoreText = 0;\r\nlet extraLife = 1000; // how many points for an extra live\r\nlet level = 1;\r\nlet sceneInit = true;\r\nvar actionKey = false;\r\nlet actionKeyRepeat = true;\r\nlet continueGame = false;\r\n\r\nexport class PlayScene extends Phaser.Scene {\r\n\r\n    constructor() {\r\n        super({ key: CST.SCENES.PLAY });\r\n    }\r\n\r\n    initVariables() { // actually init all player variables.\r\n        playerDirection = 1; // -1 is left and 1 is right\r\n        submarineOnSurface = true;\r\n        submarineSpeed = 140;\r\n        oxigenLevel = 100;\r\n        oxigenBar = 0;\r\n        pausePlayer = false;\r\n        diversXPos = 200;\r\n        yPosArray = [120, 220, 320, 420, 520];\r\n        actionKeyRepeat = true;\r\n    }\r\n\r\n    init(data) {\r\n        this.initVariables();\r\n\r\n        if (data.sceneRestart == true) {// reset this scence but avoid to init events and anims again\r\n\r\n            if (level = data.gameLevel, level > 30) level = 30;\r\n            score = data.resetScore;\r\n        }\r\n    }\r\n\r\n    preload() {\r\n        this.sound.stopAll(); // stops menu sound \r\n\r\n        if (sceneInit) this.load.plugin(\"rexvirtualjoystickplugin\", \"assets/plugins/virtualJoystick.js\", true);\r\n    }\r\n\r\n    create() {\r\n        // add background\r\n        this.background = this.physics.add.image(0, 0, CST.IMAGE.GAME_BG).setOrigin(0).setDepth(0);// background\r\n\r\n        let oceanSurface = this.add.graphics({\r\n            fillStyle: {\r\n                color: 0x27bfc4 // blue\r\n            }\r\n        });\r\n\r\n        oceanSurface.fillRect(0, 86, 800, 12).setDepth(2);\r\n\r\n        if (this.sys.game.device.input.touch == true) {// true if touch screen is present\r\n            //***********virtual joystick******** */\r\n\r\n            this.joyStick = this.plugins.get(\"rexvirtualjoystickplugin\").add(this, {// virtual joystick deafults\r\n                x: 120,\r\n                y: 470,\r\n                radius: 140,\r\n                base: this.add.circle(0, 0, 50, 0x888888),\r\n                thumb: this.add.circle(0, 0, 25, 0xcccccc),\r\n                dir: \"4dir\",\r\n                forceMin: 16,\r\n                fixed: true,\r\n                enable: true\r\n            });\r\n\r\n            this.controls = this.joyStick.createCursorKeys();// state of cursor keys\r\n            this.fireButton = this.add.image(700, 520, CST.IMAGE.FIRE_BUTTON).setScale(0.4).setDepth(0);// fire button image\r\n            this.input.addPointer(1);\r\n            this.fireButton.setInteractive(); // use background as fire button\r\n\r\n            this.fireButton.on(\"pointerover\", () => {\r\n                actionKey = true;\r\n            });\r\n\r\n        } else {\r\n            this.controls = this.input.keyboard.addKeys(\"up, down, left, right, esc\");// if no touch, use keyboard\r\n            actionKey = this.input.keyboard.addKey(\"space\");// use space as action keys\r\n        }\r\n\r\n        //add X to exit game*** \r\n        const xForExit = this.add.text(780, 0, \"X\", { fontSize: \"20px\", fill: \"#0000FF\", fontFamily: \"Arial\" });\r\n        xForExit.setInteractive();\r\n\r\n        xForExit.on(\"pointerup\", () => {\r\n            this.scene.stop(CST.SCENES.PLAY);\r\n            this.scene.run(CST.SCENES.MENU);\r\n        })\r\n\r\n        // ************submarine animatiion***************\r\n        if (sceneInit) { // create anims and events only once\r\n            sceneInit = false;\r\n\r\n            this.anims.create({\r\n                key: \"left\",\r\n                frameRate: 10,\r\n                frames: this.anims.generateFrameNumbers(CST.SPRITE.SUBMARINE, {\r\n                    start: 0,\r\n                    end: 2\r\n                })\r\n            });\r\n\r\n            this.anims.create({\r\n                key: \"right\",\r\n                frameRate: 10,\r\n                frames: this.anims.generateFrameNumbers(CST.SPRITE.SUBMARINE, {\r\n                    start: 3,\r\n                    end: 5\r\n                })\r\n            });\r\n\r\n            //********************* shark animation**************\r\n            this.anims.create({\r\n                key: \"sharkLeftToRight\",\r\n                frameRate: 5,\r\n                repeat: -1,\r\n                frames: this.anims.generateFrameNumbers(CST.SPRITE.SHARK, {\r\n                    frames: [0, 1, 2, 1, 0]\r\n                })\r\n            })\r\n\r\n            this.anims.create({\r\n                key: \"sharkRightToLeft\",\r\n                frameRate: 5,\r\n                repeat: -1,\r\n                frames: this.anims.generateFrameNumbers(CST.SPRITE.SHARK, {\r\n                    frames: [3, 4, 5, 4, 3]\r\n                })\r\n            })\r\n\r\n            //*****************diver animation *****************\r\n            this.anims.create({\r\n                key: \"diverLeftToRight\",\r\n                frameRate: 6,\r\n                repeat: -1,\r\n                frames: this.anims.generateFrameNumbers(CST.SPRITE.DIVER, {\r\n                    frames: [0, 1, 2, 1, 0, 2]\r\n                })\r\n            })\r\n\r\n            this.anims.create({\r\n                key: \"diverRightToLeft\",\r\n                frameRate: 6,\r\n                repeat: -1,\r\n                frames: this.anims.generateFrameNumbers(CST.SPRITE.DIVER, {\r\n                    frames: [3, 4, 5, 4, 3, 5]\r\n                })\r\n            })\r\n\r\n            // *****bomb animation or direction change*******\r\n            this.anims.create({\r\n                key: \"bombRight\",\r\n                frameRate: 0,\r\n                frames: this.anims.generateFrameNumbers(CST.SPRITE.BOMB, {\r\n                    frames: [0]\r\n                })\r\n            })\r\n\r\n            this.anims.create({\r\n                key: \"bombLeft\",\r\n                frameRate: 0,\r\n                frames: this.anims.generateFrameNumbers(CST.SPRITE.BOMB, {\r\n                    frames: [1]\r\n                })\r\n            })\r\n\r\n            //********enemies animation****************\r\n            this.anims.create({\r\n                key: \"enemiLeftToRight\",\r\n                frameRate: 6,\r\n                repeat: -1,\r\n                frames: this.anims.generateFrameNumbers(CST.SPRITE.SUBMARINE, {\r\n                    frames: [6, 7, 8]\r\n                })\r\n            })\r\n\r\n            this.anims.create({\r\n                key: \"enemiRightToLeft\",\r\n                frameRate: 6,\r\n                repeat: -1,\r\n                frames: this.anims.generateFrameNumbers(CST.SPRITE.SUBMARINE, {\r\n                    frames: [9, 10, 11]\r\n                })\r\n            })\r\n\r\n            /***********Events****** */\r\n            makeSoundFx.on(\"sound\", this.soundFx, this); // sound event handler\r\n            diverRescued.on(\"rescued\", this.rescueEvent, this); // divers event handler\r\n            yPosArrayFunction.on(\"updateArray\", this.arrayFunction, this);// array event\r\n            updateScoreAndLives.on(\"scoreAndLives\", this.scoreAndLives, this); // update score and manage lives displayed\r\n        }\r\n\r\n        //******oxigen bar ****** */\r\n        oxigenBar = this.add.graphics({\r\n            fillStyle: {\r\n                color: 0x000FF // blue\r\n            }\r\n        });\r\n\r\n        oxigenBar.fillRect(380, 540, oxigenLevel, 18).setDepth(1);\r\n        // ************add  text***********\r\n\r\n        scoreText = this.add.text(16, 16, \"Score:\", { fontSize: \"24px\", fill: \"#000\" });\r\n        updateScoreAndLives.emit(\"scoreAndLives\", 0); // update score and display lives\r\n        this.add.text(280, 540, \"OXIGEN:\", { fontSize: \"24px\", fill: \"#000\" });\r\n\r\n        // ******** sound********\r\n        this.sound.play(CST.AUDIO.GAME_MUSIC, { // load main theme\r\n            loop: true,\r\n            volume: 0.2\r\n        });\r\n\r\n        //add player submarine**************\r\n        this.submarine = this.physics.add.sprite(400, 75, CST.SPRITE.SUBMARINE, 0).setScale(1);\r\n        this.submarine.setSize(80, 20).setOffset(6, 10);// change submarine hitbox size\r\n        this.submarine.body.customBoundsRectangle = new Phaser.Geom.Rectangle(0, 75, 800, 525);\r\n        this.submarine.body.setCollideWorldBounds(true);\r\n\r\n        //add enemy submarine****************\r\n        this.manyEnemies = this.physics.add.group();\r\n        this.manyEnemies.defaults.setImmovable = true; // group deafults\r\n        //this.manyEnemies.defaults.setBoundsRectangle = customBounds;\r\n\r\n        //submarine group****************\r\n        this.manySharks = this.physics.add.group();\r\n        this.manySharks.defaults.setImmovable = true; // group deafults\r\n        //this.manySharks.defaults.setCollideWorldBounds = true;\r\n        //this.manySharks.defaults.setBoundsRectangle = customBounds;\r\n\r\n        //divers group**************\r\n        this.manyDivers = this.physics.add.group();\r\n        // this.manyDivers.defaults.setImmovable = true;\r\n\r\n        //********group of divers saved***** */\r\n        this.diversSaved = this.add.group();\r\n\r\n        for (let i = 0; i < diversRescued; i++) {\r\n            diversXPos += 50;\r\n            this.diversSaved.add(this.add.sprite(diversXPos, 580, CST.SPRITE.DIVER, 0).setScale(0.15));\r\n        }\r\n\r\n        // bomb group*****************\r\n        this.manyBombs = this.physics.add.group();\r\n        this.manyBombs.defaults.setImmovable = true; // group deafults\r\n        //this.rightBombs.defaults.setCollideWorldBounds = true;\r\n        //this.rightBombs.defaults.setBoundsRectangle = new Phaser.Geom.Rectangle(0, 0, this.game.renderer.width, this.game.renderer.height);\r\n\r\n        // add a timed events\r\n        this.timedEvents();\r\n\r\n        // *************sprite colition******************\r\n\r\n        this.physics.add.collider(this.background, this.manyBombs, function (_background, manyBombs) { // left bomb collition detect\r\n\r\n            if (manyBombs.body.checkWorldBounds() == true) {// checks if the bombs are in the world bounds\r\n                manyBombs.destroy();// if not destroy bombs\r\n            }\r\n        });\r\n\r\n        this.physics.add.collider(this.submarine, this.manySharks, function (submarine, _shark) { // collition detect\r\n            submarine.active = false;\r\n        });\r\n\r\n        this.physics.add.collider(this.submarine, this.manyEnemies, function (submarine, _enemy) { // collition detect\r\n            submarine.active = false;\r\n        });\r\n\r\n        this.physics.add.collider(this.submarine, this.manyBombs, function (submarine, manyBombs) { // collition detect\r\n\r\n            if (manyBombs.tintTopLeft == 0xff0000) submarine.active = false;\r\n        });\r\n\r\n        this.physics.add.collider(this.manyDivers, this.manySharks, function (diver, shark) { // collition detect\r\n            const sharkVel = shark.body.velocity.x// take the shark velocity and transfer it to the kamikaze diver\r\n\r\n            if (diver.tintTopLeft == 0x0000FF) {\r\n                diver.body.setVelocityX(sharkVel);\r\n\r\n                if (sharkVel > 0) {// depending on the shark velocitcity is the kamikaze diver orientation\r\n                    diver.play(\"diverLeftToRight\");\r\n                } else {\r\n                    diver.play(\"diverRightToLeft\");\r\n                }\r\n            }\r\n        });\r\n\r\n        this.physics.add.collider(this.manyDivers, this.manyEnemies, function (diver, enemies) { // collition detect\r\n            const enemiesVel = enemies.body.velocity.x\r\n\r\n            if (diver.tintTopLeft == 0x0000FF) {// enemies will destroy kamikaze divers and rest points\r\n                diver.destroy();\r\n                makeSoundFx.emit(\"sound\", 2);\r\n\r\n                if (score >= 20) updateScoreAndLives.emit(\"scoreAndLives\", -20);\r\n            }\r\n        });\r\n\r\n        this.physics.world.addCollider(this.manyDivers, this.manyDivers, function (diverOne, diverTwo) {// if divers collide with each other they go separated ways\r\n\r\n            if (diverOne.body.velocity.x > 0) {\r\n                diverOne.body.setVelocityX(100);\r\n                diverOne.play(\"diverLeftToRight\");\r\n            } else {\r\n                diverOne.body.setVelocityX(-100);\r\n                diverOne.play(\"diverRightToLeft\");\r\n            }\r\n\r\n            if (diverTwo.body.velocity.x > 0) {\r\n                diverTwo.body.setVelocityX(100);\r\n                diverTwo.play(\"diverLeftToRight\");\r\n            } else {\r\n                diverTwo.body.setVelocityX(-100);\r\n                diverTwo.play(\"diverRightToLeft\");\r\n            }\r\n        });\r\n\r\n        this.physics.add.collider(this.manyDivers, this.manyBombs, function (diver, manyBombs) { // collition detect          \r\n            const bombsVel = manyBombs.body.velocity.x\r\n            diver.body.setVelocityX(bombsVel); // bombs force all divers to flee in oposite direction.\r\n\r\n            if (bombsVel > 0) {\r\n                diver.play(\"diverLeftToRight\");\r\n            } else {\r\n                diver.play(\"diverRightToLeft\");\r\n            }\r\n        });\r\n\r\n        this.physics.add.collider(this.manyDivers, this.submarine, function (_submarine, diver) { // collition detect\r\n            let thisScore = 10; // keep trak of normal divers score or kamikaze divers score\r\n\r\n            if (diver.tintTopLeft != 0x0000FF) {\r\n                yPosArrayFunction.emit(\"updateArray\", diver);// only update array with normal divers\r\n                thisScore += 10;// more score if it is a kamikaze diver\r\n            }\r\n            diver.destroy();\r\n            updateScoreAndLives.emit(\"scoreAndLives\", thisScore);\r\n            makeSoundFx.emit(\"sound\", 2);\r\n            diverRescued.emit(\"rescued\");\r\n        });\r\n\r\n        this.physics.add.collider(this.manySharks, this.manyBombs, function (manySharks, manyBombs) { // collition detect          \r\n\r\n            if (manyBombs.tintTopLeft != 0xFF0000) {// take color to separate player bombs vs enemy bombs\r\n                yPosArrayFunction.emit(\"updateArray\", manySharks);\r\n                manyBombs.destroy();\r\n                manySharks.destroy();\r\n                updateScoreAndLives.emit(\"scoreAndLives\", 5);\r\n                makeSoundFx.emit(\"sound\", 1);\r\n            }\r\n        });\r\n\r\n        this.physics.add.collider(this.manyEnemies, this.manyBombs, function (manyEnemies, manyBombs) { // collition detect\r\n\r\n            if (manyBombs.tintTopLeft != 0xFF0000 && manyEnemies.tintTopLeft != 0x800040) {// prevent killing of patrol sub\r\n                yPosArrayFunction.emit(\"updateArray\", manyEnemies);\r\n                manyBombs.destroy();\r\n                manyEnemies.destroy();\r\n                updateScoreAndLives.emit(\"scoreAndLives\", 10);\r\n                makeSoundFx.emit(\"sound\", 0);\r\n            }\r\n        });\r\n    }\r\n\r\n    timedEvents() {\r\n        incrementEnemiesVelocity = level * 2;\r\n        this.time.removeAllEvents();\r\n        this.time.addEvent({ delay: Phaser.Math.Between(2000, (3000 - incrementEnemiesVelocity)), callback: this.sharkEvent, callbackScope: this, loop: true }); // create a shark \r\n        this.time.addEvent({ delay: Phaser.Math.Between(4000, (5000 - incrementEnemiesVelocity)), callback: this.enemySubEvent, callbackScope: this, loop: true });// create a enemy sub\r\n        this.time.addEvent({ delay: Phaser.Math.Between(2000, (4000 - incrementEnemiesVelocity)), callback: this.enemySubFire, callbackScope: this, loop: false });// create a enemy sub fire event\r\n        this.time.addEvent({ delay: (6000 + incrementEnemiesVelocity), callback: this.diverEvent, callbackScope: this, loop: true });// create a diver\r\n        this.time.addEvent({ delay: 1000, callback: this.oxigenTimer, callbackScope: this, loop: true });// create a diver\r\n\r\n        if (level > 2) this.time.addEvent({ delay: Phaser.Math.Between(10000, (15000 - incrementEnemiesVelocity)), callback: this.patrolSubmarineEvent, callbackScope: this, loop: true });// create a enemy sub fire event\r\n    }\r\n\r\n    scoreAndLives(scoreToAdd) { // add score and manage lives\r\n        score += scoreToAdd;\r\n\r\n        if (score > extraLife) {\r\n            extraLife += 1000;\r\n            if (lives < 4) {\r\n                lives++;// every 1000 points add a new life if less than 4 \r\n            } else {\r\n                score += 100;// else give you bonus points\r\n            }\r\n        }\r\n        scoreText.setText(\"Score:\" + score);\r\n        let livesXPos = 750;\r\n\r\n        for (let x = lives; x > 0; x--) {\r\n            const submarineLives = this.add.sprite(livesXPos, 10, CST.SPRITE.SUBMARINE, 0).setScale(0.5);\r\n            livesXPos -= submarineLives.displayWidth;\r\n        }\r\n    }\r\n\r\n    arrayFunction(object) {\r\n        yPosArray.sort(function (a, b) { return a - b });// arrange numbers in acending order\r\n\r\n        if (yPosArray[0] == 0) yPosArray[0] = (Math.round(object.body.center.y / 100) * 100) + 20;\r\n    }\r\n\r\n    //*****Create sound effects********* */\r\n    soundFx(effect) {// emits one time sounds no repeat\r\n        switch (effect) {\r\n            case 0:\r\n                this.sound.play(CST.AUDIO.ENEMY_SOUND);// enemy killed\r\n                break;\r\n            case 1:\r\n                this.sound.play(CST.AUDIO.SHARK_SOUND);// shark killed\r\n                break;\r\n            case 2:\r\n                this.sound.play(CST.AUDIO.DIVER_SOUND);// diver rescued sound\r\n                break;\r\n            case 3:\r\n                this.sound.play(CST.AUDIO.OXIGEN);//oxigen refill sound\r\n                break;\r\n        }\r\n    }\r\n\r\n    /******Dispay number of divers rescued on screen******** */\r\n    rescueEvent() {\r\n\r\n        if (!submarineOnSurface && this.diversSaved.getLength() < 6) {\r\n            diversToRescue = 1;\r\n            diversRescued++;\r\n            diversXPos += 50;\r\n            this.diversSaved.add(this.add.sprite(diversXPos, 580, CST.SPRITE.DIVER, 0).setScale(0.15));\r\n\r\n            if (diversRescued == 6) {// if 6 divers are rescued emit a \"ding\"\r\n                this.sound.play(CST.AUDIO.RESCUE_COMPLETED);\r\n                diversToRescue = 6;\r\n            }\r\n        } else if (submarineOnSurface && diversToRescue > 0) {\r\n\r\n            if (diversRescued == 6) {\r\n                level++; // advance to next level if there are 6 divers rescued    \r\n                updateScoreAndLives.emit(\"scoreAndLives\", 50); // gives 50 points if all divers are recued\r\n                this.timedEvents();\r\n            }\r\n            diversXPos -= 50;\r\n            diversToRescue--;\r\n            diversRescued--;\r\n            const getDivers = this.diversSaved.getChildren();\r\n            this.diversSaved.remove(getDivers[diversRescued], true, true);\r\n        }\r\n    }\r\n\r\n    /********Oxigen bar timer******** */\r\n    oxigenTimer() {\r\n\r\n        if (submarineOnSurface && pausePlayer) {// if submarine is on surface oxigen is refilled \r\n            diverRescued.emit(\"rescued\");\r\n\r\n            if (oxigenLevel < 100) {\r\n                oxigenLevel += 15; // recharge oxigen\r\n            }\r\n\r\n            if (oxigenLevel > 30) {// retrun oxigenbar to is origianl color\r\n                oxigenBar.clear();\r\n                oxigenBar.defaultFillColor = 0x000FF;\r\n            }\r\n\r\n            if (oxigenLevel > 100) {\r\n                oxigenLevel = 100;\r\n            }\r\n\r\n            if (diversToRescue == 0 && oxigenLevel == 100) {\r\n                pausePlayer = false;// unpause player\r\n                this.sound.stopByKey(CST.AUDIO.OXIGEN);// stop oxigen refill sound\r\n                this.sound.removeByKey(CST.AUDIO.OXIGEN_LOW);// stop oxigen refill sound\r\n                this.sound.resumeAll();// resume music\r\n            } else {\r\n                makeSoundFx.emit(\"sound\", 3);// oxigen refill\r\n            }\r\n        }\r\n\r\n        if (!submarineOnSurface) {// if the submarine is underwater oxigen is consumed\r\n            oxigenBar.clear();\r\n\r\n            if (oxigenLevel -= 2, oxigenLevel < 1) { // if no oxigen left end game.\r\n                this.endGame();\r\n            }\r\n\r\n            if (oxigenLevel == 30) {\r\n                oxigenBar.defaultFillColor = 0xFF0000;\r\n                this.sound.play(CST.AUDIO.OXIGEN_LOW, { // load main theme\r\n                    loop: true,\r\n                    volume: 0.3\r\n                });\r\n            }\r\n        }\r\n        oxigenBar.fillRect(380, 540, oxigenLevel, 18).setDepth(1);\r\n    }\r\n\r\n    updateBodies() { // check if the place if already in use by another body\r\n\r\n        for (let i = 0; i < this.manySharks.getLength(); i++) {\r\n            if (getShark[i].body.x < -(getShark[i].body.width * 1.2) || getShark[i].body.x > this.game.renderer.width) {  // looping the array to destroy sharks that are out of bounds.\r\n                yPosArrayFunction.emit(\"updateArray\", getShark[i]);\r\n                getShark[i].destroy();\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < this.manyEnemies.getLength(); i++) {\r\n\r\n            if (getEnemy[i].body.x < -(getEnemy[i].body.width * 1.2) || getEnemy[i].body.x > this.game.renderer.width) {  // looping the array to destroy sharks that are out of bounds.\r\n\r\n                if (getEnemy[i].tintTopLeft != 0x800040) yPosArrayFunction.emit(\"updateArray\", getEnemy[i]);// only update the array with normal enemies, other color enemies are not taken in account (like the patrol submarine)\r\n                getEnemy[i].destroy();\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < this.manyDivers.getLength(); i++) {\r\n\r\n            if (getDiver[i].body.x < -getDiver[i].body.width || getDiver[i].body.x > this.game.renderer.width) {  // looping the array to destroy sharks that are out of bounds.\r\n\r\n                if (getDiver[i].tintTopLeft != 0x0000FF) yPosArrayFunction.emit(\"updateArray\", getDiver[i]);// only update normal divers not kamikaze ones\r\n                getDiver[i].destroy();\r\n            }\r\n        }\r\n    }\r\n\r\n    //************Timed events**************** */\r\n    sharkEvent() { // callback shark timed event\r\n        this.updateBodies();\r\n\r\n        for (let index = 0; index < yPosArray.length; index++) {\r\n\r\n            if (yPosArray[index] != 0) {\r\n                this.manySharks.add(this.physics.add.sprite(-20, yPosArray[index], CST.SPRITE.SHARK, 0).setScale(0.15));\r\n                getShark = this.manySharks.getChildren(); // get all children of the group \r\n                const sharkGroupLength = (this.manySharks.getLength() - 1);\r\n\r\n                if (Phaser.Math.Between(0, 10) % 2 == 0) {\r\n                    getShark[sharkGroupLength].body.setVelocityX(120 + incrementEnemiesVelocity);\r\n                    this.anims.play(\"sharkLeftToRight\", getShark[sharkGroupLength]);\r\n                } else {\r\n                    getShark[sharkGroupLength].body.reset(this.game.renderer.width, yPosArray[index]);\r\n                    getShark[sharkGroupLength].body.setVelocityX(-120 + incrementEnemiesVelocity);\r\n                    this.anims.play(\"sharkRightToLeft\", getShark[sharkGroupLength])\r\n                }\r\n                yPosArray[index] = 0;\r\n\r\n                if (level > 2) {\r\n                    getShark[sharkGroupLength].tint = 0xFF0000; // change shark color to red from the 3er level and up\r\n\r\n                    if (Phaser.Math.Between(0, 2) == 0) this.kamikazeDiver();// spawn a kamikaze diver.\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //***** Enemy submarine events******** */\r\n    enemySubEvent() {\r\n        this.updateBodies();\r\n\r\n        for (let index = 0; index < yPosArray.length; index++) {\r\n\r\n            if (yPosArray[index] != 0) {\r\n\r\n                this.manyEnemies.add(this.physics.add.sprite(-20, yPosArray[index], CST.SPRITE.SUBMARINE, 0).setScale(0.8).setSize(90, 25).setOffset(0, 6));\r\n                getEnemy = this.manyEnemies.getChildren(); // get all children of the group \r\n                const enemiesGroupLength = (this.manyEnemies.getLength() - 1);\r\n\r\n                if (Phaser.Math.Between(0, 10) % 2 == 0) {\r\n                    getEnemy[enemiesGroupLength].body.setVelocityX(100 + incrementEnemiesVelocity);\r\n                    this.anims.play(\"enemiLeftToRight\", getEnemy[enemiesGroupLength]);\r\n                } else {\r\n                    getEnemy[enemiesGroupLength].body.reset(this.game.renderer.width, yPosArray[index]);\r\n                    getEnemy[enemiesGroupLength].body.setVelocityX(-100 + incrementEnemiesVelocity);\r\n                    this.anims.play(\"enemiRightToLeft\", getEnemy[enemiesGroupLength]);\r\n                }\r\n            }\r\n            yPosArray[index] = 0;\r\n        }\r\n    }\r\n\r\n    enemySubFire() {\r\n        this.time.addEvent({ delay: Phaser.Math.Between(1000, (6000 - incrementEnemiesVelocity)), callback: this.enemySubFire, callbackScope: this, loop: false });// create a enemy sub fire event\r\n\r\n        for (let i = 0; i < this.manyEnemies.getLength(); i++) {\r\n            getEnemy = this.manyEnemies.getChildren(); // get all children of the group \r\n            const getBomb = this.manyBombs.getChildren(); // get all children of the group \r\n            const bombsGroupLength = this.manyBombs.getLength();\r\n\r\n            if (getEnemy[i].body.velocity.x == (-100 + incrementEnemiesVelocity) && getEnemy[i].tintTopLeft != 0x800040) {/// get enemy direction to fire the bomb correctly and prevent the patrol sub from firing\r\n                this.manyBombs.add(this.physics.add.sprite(getEnemy[i].body.left - (getEnemy[i].body.halfWidth / 2), getEnemy[i].body.center.y, CST.SPRITE.BOMB, 0).setScale(0.10));\r\n                getBomb[bombsGroupLength].body.setVelocityX(-200 + incrementEnemiesVelocity);\r\n                getBomb[bombsGroupLength].tint = 0xFF0000;\r\n                this.anims.play(\"bombLeft\", getBomb[bombsGroupLength]);\r\n            } else if (getEnemy[i].body.velocity.x == (100 + incrementEnemiesVelocity)) {/// get enemy direction\r\n                this.manyBombs.add(this.physics.add.sprite(getEnemy[i].body.right + (getEnemy[i].body.halfWidth / 2), getEnemy[i].body.center.y, CST.SPRITE.BOMB, 0).setScale(0.10));\r\n                getBomb[bombsGroupLength].body.setVelocityX(200 + incrementEnemiesVelocity);\r\n                getBomb[bombsGroupLength].tint = 0xFF0000;\r\n                this.anims.play(\"bombRight\", getBomb[bombsGroupLength]);\r\n            }\r\n        }\r\n    }\r\n\r\n    patrolSubmarineEvent() {\r\n\r\n        if (submarineOnSurface == true) return; // only generate the patrol submarine if the player is not on surface\r\n        this.manyEnemies.add(this.physics.add.sprite(this.game.renderer.width, 80, CST.SPRITE.SUBMARINE, 0).setScale(0.8).setSize(90, 25).setOffset(0, 6));\r\n        getEnemy = this.manyEnemies.getChildren(); // get all children of the group \r\n        const enemiesGroupLength = (this.manyEnemies.getLength() - 1);\r\n        getEnemy[enemiesGroupLength].body.setVelocityX(-100 + incrementEnemiesVelocity);\r\n        getEnemy[enemiesGroupLength].tint = 0x800040; // change the color to wine\r\n        this.anims.play(\"enemiRightToLeft\", getEnemy[enemiesGroupLength]);\r\n    }\r\n\r\n    diverEvent() {\r\n        this.updateBodies();\r\n\r\n        for (let index = 0; index < yPosArray.length; index++) {\r\n\r\n            if (yPosArray[index] != 0) {\r\n\r\n                this.manyDivers.add(this.physics.add.sprite(0, yPosArray[index], CST.SPRITE.DIVER, 0).setScale(0.15));\r\n                getDiver = this.manyDivers.getChildren(); // get all children of the group \r\n                const diversGroupLength = (this.manyDivers.getLength() - 1);\r\n\r\n                if (Phaser.Math.Between(0, 10) % 2 == 0) {\r\n                    getDiver[diversGroupLength].body.setVelocityX(100 + (level * 2));\r\n                    this.anims.play(\"diverLeftToRight\", getDiver[diversGroupLength]);\r\n                } else {\r\n                    getDiver[diversGroupLength].body.reset(this.game.renderer.width, yPosArray[index]);\r\n                    getDiver[diversGroupLength].body.setVelocityX(-100 + (level * 2));\r\n                    this.anims.play(\"diverRightToLeft\", getDiver[diversGroupLength]);\r\n                }\r\n                yPosArray[index] = 0;\r\n\r\n                if (diversGroupLength > 3) return;\r\n            }\r\n        }\r\n    }\r\n\r\n    kamikazeDiver() {\r\n\r\n        for (let i = 0; i < this.manySharks.getLength(); i++) {\r\n            getShark = this.manySharks.getChildren(); // get all children of the group \r\n            const getDiver = this.manyDivers.getChildren(); // get all children of the group \r\n            const diversGroupLength = this.manyDivers.getLength();\r\n\r\n            if (getShark[i].body.velocity.x == (-120 + incrementEnemiesVelocity) && getShark[i].body.right > this.game.renderer.width && diversGroupLength < 1) {/// get enemy direction to fire the bomb correctly and prevent the patrol sub from firing\r\n                this.manyDivers.add(this.physics.add.sprite(getShark[i].body.left - (getShark[i].body.halfWidth / 1.2), getShark[i].body.center.y, CST.SPRITE.DIVER, 0).setScale(0.15));\r\n                getDiver[diversGroupLength].tint = 0x0000FF;\r\n            }\r\n        }\r\n        getDiver = this.manyDivers.getChildren(); // get all children of the group \r\n    }\r\n\r\n    endGame() {\r\n        this.input.shutdown();\r\n        this.sound.removeByKey(CST.AUDIO.GAME_MUSIC);// stop oxigen refill sound\r\n        this.submarine.tint = 0x000000; // change submarine color to black\r\n\r\n        if (lives > 0) {\r\n\r\n            if (diversRescued > 0) diversRescued--;\r\n            lives--; // rest one live\r\n            continueGame = true;\r\n        } else {\r\n            diversRescued = 0;\r\n            lives = 3;// reset lives\r\n            extraLife = 1000; //reset extra life bonus\r\n            continueGame = false;\r\n        }\r\n        this.scene.pause(CST.SCENES.PLAY);// stop current scene\r\n        this.scene.run(CST.SCENES.END, { finalScore: score, gameLevel: level, continue: continueGame });// go to score scene*/\r\n    }\r\n\r\n    update(time, delta) {// delta 16.6666 @60fps\r\n\r\n        //*********player movement******** */\r\n        if (this.submarine.active == true) { // inputs only ative while player is alive\r\n\r\n            if (!submarineOnSurface && this.submarine.body.onCeiling() == true && this.submarine.body.y < 76) {// checks if the bombs are in the world bounds\r\n\r\n                if (!submarineOnSurface && this.diversSaved.getLength() == 0) {// if the submarine reaches the surface without any diver end game\r\n                    this.endGame();\r\n                }\r\n                submarineOnSurface = true;\r\n                pausePlayer = true;\r\n                this.submarine.setVelocityY(0);\r\n                this.submarine.setVelocityX(0);\r\n                this.sound.pauseAll();// stop music\r\n            }\r\n\r\n            if (pausePlayer) return;// if refilling oxigen the submarine isn´t movable\r\n\r\n            if (actionKeyRepeat == true && (actionKey == true || actionKey.isDown == true)) {\r\n                actionKeyRepeat = false;\r\n                this.sound.play(CST.AUDIO.PLAYER_FIRE_SOUND);\r\n                const getBomb = this.manyBombs.getChildren(); // get all children of the group \r\n                const bombsGroupLength = this.manyBombs.getLength();\r\n\r\n                if (actionKey == true) actionKey = false;\r\n\r\n                if (playerDirection == 1) {\r\n                    this.manyBombs.add(this.physics.add.sprite(this.submarine.body.right + (this.submarine.body.halfWidth / 2), this.submarine.body.center.y, CST.SPRITE.BOMB, 0).setScale(0.08));\r\n                    getBomb[bombsGroupLength].body.setVelocityX(180);\r\n                    this.anims.play(\"bombRight\", getBomb[bombsGroupLength]);\r\n                } else {\r\n                    this.manyBombs.add(this.physics.add.sprite(this.submarine.body.left - (this.submarine.body.halfWidth / 2), this.submarine.body.center.y, CST.SPRITE.BOMB, 0).setScale(0.08));\r\n                    getBomb[bombsGroupLength].body.setVelocityX(-180);\r\n                    this.anims.play(\"bombLeft\", getBomb[bombsGroupLength]);\r\n                }\r\n                this.time.delayedCall(500, () => {\r\n                    if (actionKeyRepeat == false) actionKeyRepeat = true;\r\n                });\r\n            }\r\n\r\n            if (this.controls.right.isDown == true) { // left submarine  sprite movement\r\n                this.submarine.setVelocityX(submarineSpeed);\r\n                this.submarine.play(\"left\", true);\r\n                playerDirection = 1;\r\n            }\r\n\r\n            if (this.controls.left.isDown == true) { // right submarine sprite movement\r\n                this.submarine.setVelocityX(-submarineSpeed);\r\n                this.submarine.play(\"right\", true);\r\n                playerDirection = -1;\r\n            }\r\n\r\n            if ((this.controls.left.isUp && this.controls.right.isUp)) { // not moving on x axis\r\n                this.submarine.setVelocityX(0);\r\n            }\r\n\r\n            if (this.controls.up.isDown == true) { // up submarine  sprite movement              \r\n                this.submarine.setVelocityY(-submarineSpeed);\r\n            }\r\n\r\n            if (this.controls.up.isUp && this.controls.down.isUp) { // not moving on x axis\r\n                this.submarine.setVelocityY(0);\r\n            }\r\n\r\n            if (this.controls.down.isDown == true) { // down submarine sprite movement\r\n                this.submarine.setVelocityY(submarineSpeed);\r\n                submarineOnSurface = false;\r\n            }\r\n\r\n        } else {\r\n            this.endGame();\r\n        }\r\n\r\n        if (this.controls.esc.isDown == true) {\r\n            this.scene.stop(CST.SCENES.PLAY);\r\n            this.scene.run(CST.SCENES.MENU);\r\n        }\r\n    }\r\n}\r\n","import { CST } from \"../CST\";\r\nlet score = 0;\r\nlet level = 0;\r\nlet restart = true;\r\nlet continueGame = false;\r\n\r\nexport class EndScene extends Phaser.Scene {\r\n\r\n    constructor() {\r\n        super({ key: CST.SCENES.END });\r\n    }\r\n    init(data) {\r\n        score = data.finalScore;\r\n        level = data.gameLevel;\r\n        continueGame = data.continue;\r\n    }\r\n\r\n    preload() {\r\n        this.sound.stopAll(); // stops menu sound \r\n        this.sound.play(CST.AUDIO.END_SOUND);\r\n    }\r\n\r\n    create() {\r\n\r\n        if (continueGame == true) {\r\n            this.time.delayedCall(2000, () => {\r\n                this.scene.start(CST.SCENES.PLAY, { gameLevel: level, sceneRestart: restart, resetScore: score });// restart play scene\r\n            });\r\n        } else {\r\n            this.add.image(0, 0, CST.IMAGE.END_BG).setOrigin(0).setDepth(0);// background\r\n            let playButton = this.add.image(this.game.renderer.width / 2, this.game.renderer.height / 2.4, CST.IMAGE.PLAY).setDepth(1);\r\n            let scoreText = this.add.text(285, 100, \"Final Score:\", { fontSize: \"32px\", fill: \"#FFF\" });\r\n            scoreText.setText(\"Final Score:\" + score);\r\n            score = 0; //reset score\r\n\r\n            // make buttons interactive\r\n            playButton.setInteractive();\r\n\r\n            playButton.on(\"pointerup\", () => {\r\n                //this.sys.game.destroy(true); // end game and exit\r\n                score = 0;\r\n                this.scene.sleep(CST.SCENES.END);\r\n                this.scene.start(CST.SCENES.PLAY, { gameLevel: level, sceneRestart: restart, resetScore: score });// restart play scene\r\n            })\r\n        }\r\n        this.controls = this.input.keyboard.addKeys(\"enter\");// keyboard keys\r\n    }\r\n\r\n    update(time, delta) {\r\n\r\n        if (this.controls.enter.isDown == true) {// use enter key to restart game\r\n            this.scene.sleep(CST.SCENES.END);\r\n            this.scene.start(CST.SCENES.PLAY, { gameLevel: level, sceneRestart: restart, resetScore: score });// restart play scene\r\n        }\r\n    }\r\n}\r\n\r\n","/** @type {import(\"../typings/phaser\")} */\r\n\r\nimport { LoadScene } from \"./scenes/LoadScene\";\r\nimport { MenuScene } from \"./scenes/MenuScene\";\r\nimport { PlayScene } from \"./scenes/PlayScene\";\r\nimport { EndScene } from \"./scenes/EndScene\";\r\n\r\nlet game = new Phaser.Game({\r\n    scene: [\r\n        LoadScene, MenuScene, PlayScene, EndScene\r\n    ],\r\n    render: {\r\n        pixelArt: true\r\n    },\r\n    scale: {\r\n        autoCenter: Phaser.Scale.CENTER_BOTH,\r\n        mode: Phaser.Scale.FIT, // use FIT to center preserving aspect ratio or AUTO to fullscreen without preserving aspect\r\n        width: 800,\r\n        height: 600\r\n    },\r\n    physics: {\r\n        default: \"arcade\",\r\n        arcade: {\r\n            debug: false,\r\n            debugShowBody: false, // show hitbox \r\n            debugShowStaticBody: false\r\n        }\r\n    }\r\n});\r\n"]}