{"version":3,"sources":["src/CST.js","src/scenes/LoadScene.js","src/scenes/MenuScene.js","src/scenes/PlayScene.js","src/scenes/EndScene.js","src/main.js"],"names":["CST","SCENES","LOAD","MENU","PLAY","END","IMAGE","LOGO","OPTIONS","TITLE","GAME_BG","END_BG","FIRE_BUTTON","HOW_TO_PLAY","HOW_TO_PLAY_IMAGE","BACK","AUDIO","GAME_MUSIC","DIVER_SOUND","ENEMY_SOUND","SHARK_SOUND","PLAYER_FIRE_SOUND","END_SOUND","NEW_SOUND","OXIGEN","OXIGEN_LOW","RESCUE_COMPLETED","RESCUE_SEQUENCE","SPRITE","SUBMARINE","SHARK","DIVER","BOMB","exports","_CST","require","_typeof","o","Symbol","iterator","constructor","prototype","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","_toPropertyKey","key","_createClass","protoProps","staticProps","arg","_toPrimitive","String","input","hint","prim","toPrimitive","undefined","res","call","Number","_inherits","subClass","superClass","create","value","_setPrototypeOf","p","setPrototypeOf","bind","__proto__","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","result","_getPrototypeOf","NewTarget","Reflect","construct","arguments","apply","_possibleConstructorReturn","self","_assertThisInitialized","ReferenceError","sham","Proxy","Boolean","e","valueOf","getPrototypeOf","LoadScene","_Phaser$Scene","Phaser","Scene","_super","prop","load","setPath","image","audio","spritesheet","frameWidth","frameHeight","_this","loadSprites","loadAudio","loadImages","loadingBar","add","graphics","fillStyle","color","on","percent","fillRect","game","renderer","height","width","console","log","file","src","scene","stop","start","MenuScene","sound","stopAll","shutdown","run","setDepth","setScale","setOrigin","howToPlayImage","setVisible","playButton","howToPlayButton","x","y","displayHeight","backButton","hoverSprite","sprite","displayWidth","pauseOnBlur","play","loop","volume","repeat","controls","keyboard","addKeys","anims","frameRate","frames","generateFrameNumbers","setInteractive","setPosition","playTheGame","time","delta","enter","isDown","playerDirection","submarineOnSurface","submarineSpeed","oxigenLevel","oxigenBar","pausePlayer","diversXPos","diversToRescue","diversRescued","getShark","getEnemy","getDiver","yPosArray","incrementEnemiesVelocity","sharkStandarVelocity","enemyStandarVelocity","diverStandarVelocity","diverRescued","Events","EventEmitter","makeSoundFx","yPosArrayFunction","updateScoreAndLives","lives","score","scoreText","extraLife","level","sceneInit","actionKey","actionKeyRepeat","continueGame","escKey","diversCollider","PlayScene","data","initVariables","sceneRestart","gameLevel","resetScore","plugin","background","physics","alpha","sys","device","touch","joyStick","plugins","get","radius","base","circle","thumb","dir","forceMin","fixed","enable","createCursorKeys","fireButton","addPointer","addKey","xForExit","text","fontSize","fill","fontFamily","end","soundFx","rescueEvent","arrayFunction","scoreAndLives","emit","submarine","setSize","setOffset","body","customBoundsRectangle","Geom","Rectangle","setCollideWorldBounds","manyEnemies","group","defaults","setImmovable","manySharks","manyDivers","diversSaved","manyBombs","timedEvents","collider","_background","checkWorldBounds","destroy","_shark","active","_enemy","tintTopLeft","diver","shark","sharkVel","velocity","setVelocityX","_enemies","world","addCollider","diverOne","diverTwo","overlap","bombsVel","_submarine","thisScore","removeAllEvents","addEvent","delay","Math","Between","callback","sharkEvent","callbackScope","enemySubEvent","enemySubFire","diverEvent","sharkWavePattern","oxigenTimer","patrolSubmarineEvent","scoreToAdd","setText","livesXPos","object","sort","a","b","round","center","effect","getLength","getDivers","getChildren","remove","clear","defaultFillColor","stopByKey","removeByKey","resumeAll","endGame","right","left","updateBodies","index","sharkGroupLength","reset","halfWidth","tint","kamikazeDiver","setVelocityY","enemiesGroupLength","bombsGroupLength","getBomb","diversGroupLength","sharkBody","sharkRight","sharkLeft","sarkHalfWidth","sharkCenterY","pause","finalScore","continue","onCeiling","pauseAll","delayedCall","isUp","up","down","onFloor","restart","EndScene","sleep","goToPlayScene","_LoadScene","_MenuScene","_PlayScene","_EndScene","Game","render","pixelArt","scale","autoCenter","Scale","CENTER_BOTH","mode","AUTO","default","arcade","debug","debugShowBody","debugShowStaticBody"],"mappings":"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","file":"main.417a0256.js","sourceRoot":"..","sourcesContent":["export const CST = {\r\n    SCENES: {\r\n        LOAD: \"LOAD\",\r\n        MENU: \"MENU\",\r\n        PLAY: \"PLAY\",\r\n        END: \"END\"\r\n    },\r\n    IMAGE: {\r\n        LOGO: \"logo.png\",\r\n        OPTIONS: \"options_button.png\",\r\n        PLAY: \"play_button.png\",\r\n        TITLE: \"title_bg.png\",\r\n        GAME_BG: \"game_bg.png\",\r\n        END_BG: \"end_bg.png\",\r\n        FIRE_BUTTON: \"fire_button.png\",\r\n        HOW_TO_PLAY: \"how_button.png\",\r\n        HOW_TO_PLAY_IMAGE:\"howtoplay_image.png\",\r\n        BACK:\"back_button.png\"\r\n    },\r\n    AUDIO: {\r\n        TITLE: \"menu_theme.mp3\",\r\n        GAME_MUSIC: \"main_theme.mp3\",\r\n        DIVER_SOUND: \"diver_rescued.ogg\",\r\n        ENEMY_SOUND: \"enemy_sub_destroyed.ogg\",\r\n        SHARK_SOUND: \"shark_killed.ogg\",\r\n        PLAYER_FIRE_SOUND: \"fire_sound.ogg\",\r\n        END_SOUND: \"gameover.ogg\",\r\n        NEW_SOUND: \"new_game.ogg\",\r\n        OXIGEN: \"oxigen_refill.ogg\",\r\n        OXIGEN_LOW: \"oxigen_low.ogg\",\r\n        RESCUE_COMPLETED: \"rescue_completed.ogg\",\r\n        RESCUE_SEQUENCE: \"rescue_sequence.ogg\"\r\n    },\r\n    SPRITE: {\r\n        SUBMARINE: \"submarine.png\",\r\n        SHARK: \"shark.png\",\r\n        DIVER: \"diver.png\",\r\n        BOMB: \"bomb.png\"\r\n    }\r\n}","import { CST } from \"../CST\";\r\nexport class LoadScene extends Phaser.Scene {\r\n    constructor() {\r\n        super({\r\n            key: CST.SCENES.LOAD\r\n        })\r\n    }\r\n    init() {\r\n\r\n    }\r\n\r\n    loadImages() {// load all images at once\r\n        this.load.setPath(\"./assets/image\");\r\n\r\n        for (let prop in CST.IMAGE) {\r\n            this.load.image(CST.IMAGE[prop], CST.IMAGE[prop]);\r\n        }\r\n    }\r\n\r\n    loadAudio() { // load all audio at once\r\n        this.load.setPath(\"./assets/audio\");\r\n\r\n        for (let prop in CST.AUDIO) {\r\n            this.load.audio(CST.AUDIO[prop], CST.AUDIO[prop]);\r\n        }\r\n    }\r\n\r\n    loadSprites() {  // if all sprites are the same size load all at once\r\n        this.load.setPath(\"./assets/sprite\");\r\n\r\n        this.load.spritesheet(CST.SPRITE.SUBMARINE, CST.SPRITE.SUBMARINE, { frameWidth: 90, frameHeight: 33});\r\n        this.load.spritesheet(CST.SPRITE.SHARK, CST.SPRITE.SHARK, { frameWidth: 440, frameHeight: 232});\r\n        this.load.spritesheet(CST.SPRITE.DIVER, CST.SPRITE.DIVER, { frameWidth: 316, frameHeight: 213});\r\n        this.load.spritesheet(CST.SPRITE.BOMB, CST.SPRITE.BOMB, { frameWidth: 279, frameHeight: 210});\r\n    }\r\n\r\n    preload() {\r\n\r\n        this.loadSprites();\r\n\r\n        this.loadAudio();\r\n\r\n        this.loadImages();\r\n        //create loading bar\r\n\r\n        let loadingBar = this.add.graphics({\r\n            fillStyle: {\r\n                color: 0xffffff // white\r\n            }\r\n        })\r\n        // simulate large load\r\n\r\n        // loader event\r\n\r\n        this.load.on(\"progress\", (percent) => {\r\n            loadingBar.fillRect(0, this.game.renderer.height / 2, this.renderer.width * percent, 50);\r\n            console.log(percent);\r\n        })\r\n\r\n        this.load.on(\"complete\", () => {\r\n        });\r\n\r\n        this.load.on(\"load\", (file) => {\r\n            console.log(file.src)\r\n        })\r\n    }\r\n    create() {\r\n        this.scene.stop(CST.SCENES.LOAD);\r\n        this.scene.start(CST.SCENES.MENU);\r\n    }\r\n}","import { CST } from \"../CST\";\r\n\r\nexport class MenuScene extends Phaser.Scene {\r\n    constructor() {\r\n        super({\r\n            key: CST.SCENES.MENU\r\n        })\r\n    }\r\n    init() {\r\n    }\r\n\r\n    preload() {\r\n        this.sound.stopAll(); // stops menu sound \r\n    }\r\n\r\n    playTheGame(){\r\n        this.input.shutdown();\r\n        this.scene.stop(CST.SCENES.MENU);\r\n        this.scene.run(CST.SCENES.PLAY);\r\n    }\r\n\r\n    create() { // create menu image\r\n        console.log(\"title loading\");\r\n        // creates in z order\r\n\r\n        this.add.image(this.game.renderer.width / 2, this.game.renderer.height * 0.20, CST.IMAGE.LOGO).setDepth(1).setScale(0.25);\r\n        this.add.image(0, 0, CST.IMAGE.TITLE).setOrigin(0).setDepth(0);\r\n        let howToPlayImage = this.add.image(0,0, CST.IMAGE.HOW_TO_PLAY_IMAGE).setOrigin(0).setDepth(1).setVisible(false);\r\n\r\n        //set button to a variable\r\n        let playButton = this.add.image(this.game.renderer.width / 2, this.game.renderer.height / 2, CST.IMAGE.PLAY).setDepth(1).setScale(0.10);\r\n        let howToPlayButton = this.add.image(playButton.x, playButton.y + (playButton.displayHeight * 1.5), CST.IMAGE.HOW_TO_PLAY).setDepth(1).setScale(0.25);\r\n        let backButton = this.add.image(this.game.renderer.width / 2, this.game.renderer.height / 2, CST.IMAGE.BACK).setDepth(1).setScale(0.10).setVisible(false);\r\n        let hoverSprite = this.add.sprite((playButton.x - playButton.displayWidth), (playButton.y - 5),  CST.SPRITE.SUBMARINE).setScale(1).setDepth(0);\r\n\r\n        //play music\r\n        this.sound.pauseOnBlur = false; // play audio even when out of focus.\r\n        this.sound.play(CST.AUDIO.TITLE, {\r\n            loop: true,\r\n            volume: 0.8,\r\n            repeat: -1\r\n        })\r\n\r\n        this.controls = this.input.keyboard.addKeys(\"up, down, left, right, space, enter\");// keyboard keys\r\n\r\n        // create animation\r\n        this.anims.create({\r\n            key: \"animSubmarine\",\r\n            frameRate: 3,\r\n            repeat: -1,// forever\r\n            frames: this.anims.generateFrameNumbers(CST.SPRITE.SUBMARINE, {\r\n                frames: [0, 1, 2]\r\n            })\r\n        })\r\n        hoverSprite.play(\"animSubmarine\");\r\n\r\n        // make buttons interactive\r\n        playButton.setInteractive();\r\n        howToPlayButton.setInteractive();\r\n        backButton.setInteractive();\r\n\r\n        playButton.on(\"pointerover\", () => {\r\n            hoverSprite.setVisible(true);\r\n            hoverSprite.setPosition((playButton.x - playButton.displayWidth), (playButton.y - (playButton.displayHeight / 6)));\r\n        })\r\n\r\n        playButton.on(\"pointerout\", () => {\r\n            hoverSprite.setVisible(false);\r\n        })\r\n\r\n        playButton.on(\"pointerup\", () => {\r\n           this.playTheGame();\r\n        })\r\n\r\n        howToPlayButton.on(\"pointerover\", () => {\r\n            hoverSprite.setVisible(true);\r\n            hoverSprite.setPosition((howToPlayButton.x - howToPlayButton.displayWidth / 1.5), (howToPlayButton.y - (howToPlayButton.displayHeight / 6)));\r\n        })\r\n\r\n        howToPlayButton.on(\"pointerout\", () => {\r\n            console.log(\"out of here\")\r\n            hoverSprite.setVisible(false);\r\n        })\r\n\r\n        howToPlayButton.on(\"pointerup\", () => {\r\n            playButton.setVisible(false);\r\n            howToPlayButton.setVisible(false);\r\n            howToPlayImage.setVisible(true);\r\n            backButton.setVisible(true);\r\n        })\r\n\r\n        backButton.on(\"pointerup\", () => {\r\n            backButton.setVisible(false);\r\n            howToPlayImage.setVisible(false);\r\n            playButton.setVisible(true);\r\n            howToPlayButton.setVisible(true);\r\n         })\r\n    }\r\n\r\n    update(time, delta) {\r\n\r\n        if (this.controls.enter.isDown == true) {// use enter key to start game\r\n            this.playTheGame();\r\n        }\r\n    }\r\n}","import { CST } from \"../CST\";\r\n//********NPCs variables */\r\nlet diversToRescue = 0;\r\nlet diversRescued = 0;\r\nvar getShark = 0; // shark childrens\r\nvar getEnemy = 0; // enemies childrens \r\nvar getDiver = 0;// divers children\r\nlet yPosArray = [130, 230, 330, 430, 530];\r\nlet incrementEnemiesVelocity = 0; // this is affected each level adds more velocity\r\nconst sharkStandarVelocity = 140;// the standar vlocity\r\nconst enemyStandarVelocity = 120;\r\nconst diverStandarVelocity = 100;\r\nconst diverRescued = new Phaser.Events.EventEmitter();// new event \r\nconst makeSoundFx = new Phaser.Events.EventEmitter();// new event \r\nconst yPosArrayFunction = new Phaser.Events.EventEmitter();// new event \r\nconst updateScoreAndLives = new Phaser.Events.EventEmitter();// new event \r\n//****player variables ********\r\nlet playerDirection; // -1 is left and 1 is right\r\nlet submarineOnSurface;\r\nlet submarineSpeed;\r\nlet oxigenLevel;\r\nvar oxigenBar;\r\nlet pausePlayer;\r\nlet diversXPos;\r\nlet lives = 3;\r\n//********other variables */\r\nlet score = 0;\r\nvar scoreText = 0;\r\nlet extraLife = 1000; // how many points for an extra live\r\nlet level = 1;\r\nlet sceneInit = true;\r\nvar actionKey = false;\r\nlet actionKeyRepeat = true;\r\nlet continueGame = false;\r\nlet escKey = false;\r\nvar diversCollider = 0;\r\n\r\nexport class PlayScene extends Phaser.Scene {\r\n\r\n    constructor() {\r\n        super({ key: CST.SCENES.PLAY });\r\n    }\r\n\r\n    initVariables() { // actually init all player variables.\r\n        playerDirection = 1; // -1 is left and 1 is right\r\n        submarineOnSurface = true;\r\n        submarineSpeed = 140;\r\n        oxigenLevel = 100;\r\n        oxigenBar = 0;\r\n        pausePlayer = false;\r\n        diversXPos = 200;\r\n        yPosArray = [120, 220, 320, 420, 520];\r\n        actionKeyRepeat = true;\r\n    }\r\n\r\n    init(data) {\r\n        this.initVariables();\r\n\r\n        if (data.sceneRestart == true) {// reset this scence but avoid to init events and anims again\r\n\r\n            if (level = data.gameLevel, level > 30) level = 30;\r\n            score = data.resetScore;\r\n        }\r\n    }\r\n\r\n    preload() {\r\n        this.sound.stopAll(); // stops menu sound \r\n\r\n        if (sceneInit) this.load.plugin(\"rexvirtualjoystickplugin\", \"assets/plugins/virtualJoystick.js\", true);\r\n    }\r\n\r\n    create() {\r\n        // add background\r\n        this.background = this.physics.add.image(0, 0, CST.IMAGE.GAME_BG).setOrigin(0).setDepth(0);// background\r\n\r\n        let oceanSurface = this.add.graphics({\r\n            fillStyle: {\r\n                color: 0x27bfc4, // blue\r\n                alpha: 0.8\r\n            }\r\n        });\r\n\r\n        oceanSurface.fillRect(0, 86, 800, 12).setDepth(2);\r\n\r\n        if (this.sys.game.device.input.touch == true) {// true if touch screen is present\r\n            //***********virtual joystick******** */\r\n\r\n            this.joyStick = this.plugins.get(\"rexvirtualjoystickplugin\").add(this, {// virtual joystick deafults\r\n                x: 120,\r\n                y: 470,\r\n                radius: 100,\r\n                base: this.add.circle(0, 0, 45, 0xc1beb7),\r\n                thumb: this.add.circle(0, 0, 25, 0xcccccc),\r\n                dir: \"4dir\",\r\n                forceMin: 16,\r\n                fixed: true,\r\n                enable: true\r\n            });\r\n\r\n            this.controls = this.joyStick.createCursorKeys();// state of cursor keys\r\n            this.fireButton = this.add.image(700, 520, CST.IMAGE.FIRE_BUTTON).setScale(0.3).setDepth(0);// fire button image\r\n            this.input.addPointer(1);\r\n            this.fireButton.setInteractive(); // use background as fire button\r\n\r\n            this.fireButton.on(\"pointerover\", () => {\r\n                actionKey = true;\r\n            });\r\n\r\n        } else {\r\n            this.controls = this.input.keyboard.addKeys(\"up, down, left, right\");// if no touch, use keyboard\r\n            actionKey = this.input.keyboard.addKey(\"space\");// use space as action keys\r\n            escKey = this.input.keyboard.addKey(\"esc\");// use space as action keys\r\n        }\r\n\r\n        //add X to exit game*** \r\n        const xForExit = this.add.text(780, 0, \"X\", { fontSize: \"24px\", fill: \"#0000FF\", fontFamily: \"Arial\" });\r\n        xForExit.setInteractive();\r\n\r\n        xForExit.on(\"pointerup\", () => {\r\n            score = 0;\r\n            this.scene.stop(CST.SCENES.PLAY);\r\n            this.scene.run(CST.SCENES.MENU);\r\n        })\r\n\r\n        // ************submarine animatiion***************\r\n        if (sceneInit) { // create anims and events only once\r\n            sceneInit = false;\r\n\r\n            this.anims.create({\r\n                key: \"left\",\r\n                frameRate: 10,\r\n                repeat: -1,\r\n                frames: this.anims.generateFrameNumbers(CST.SPRITE.SUBMARINE, {\r\n                    start: 0,\r\n                    end: 2\r\n                })\r\n            });\r\n\r\n            this.anims.create({\r\n                key: \"right\",\r\n                frameRate: 10,\r\n                repeat: -1,\r\n                frames: this.anims.generateFrameNumbers(CST.SPRITE.SUBMARINE, {\r\n                    start: 3,\r\n                    end: 5\r\n                })\r\n            });\r\n\r\n            //********************* shark animation**************\r\n            this.anims.create({\r\n                key: \"sharkLeftToRight\",\r\n                frameRate: 5,\r\n                repeat: -1,\r\n                frames: this.anims.generateFrameNumbers(CST.SPRITE.SHARK, {\r\n                    frames: [0, 1, 2, 1, 0]\r\n                })\r\n            })\r\n\r\n            this.anims.create({\r\n                key: \"sharkRightToLeft\",\r\n                frameRate: 5,\r\n                repeat: -1,\r\n                frames: this.anims.generateFrameNumbers(CST.SPRITE.SHARK, {\r\n                    frames: [3, 4, 5, 4, 3]\r\n                })\r\n            })\r\n\r\n            //*****************diver animation *****************\r\n            this.anims.create({\r\n                key: \"diverLeftToRight\",\r\n                frameRate: 6,\r\n                repeat: -1,\r\n                frames: this.anims.generateFrameNumbers(CST.SPRITE.DIVER, {\r\n                    frames: [0, 1, 2, 1, 0, 2]\r\n                })\r\n            })\r\n\r\n            this.anims.create({\r\n                key: \"diverRightToLeft\",\r\n                frameRate: 6,\r\n                repeat: -1,\r\n                frames: this.anims.generateFrameNumbers(CST.SPRITE.DIVER, {\r\n                    frames: [3, 4, 5, 4, 3, 5]\r\n                })\r\n            })\r\n\r\n            // *****bomb animation or direction change*******\r\n            this.anims.create({\r\n                key: \"bombRight\",\r\n                frameRate: 0,\r\n                frames: this.anims.generateFrameNumbers(CST.SPRITE.BOMB, {\r\n                    frames: [0]\r\n                })\r\n            })\r\n\r\n            this.anims.create({\r\n                key: \"bombLeft\",\r\n                frameRate: 0,\r\n                frames: this.anims.generateFrameNumbers(CST.SPRITE.BOMB, {\r\n                    frames: [1]\r\n                })\r\n            })\r\n\r\n            /***********Events****** */\r\n            makeSoundFx.on(\"sound\", this.soundFx, this); // sound event handler\r\n            diverRescued.on(\"rescued\", this.rescueEvent, this); // divers event handler\r\n            yPosArrayFunction.on(\"updateArray\", this.arrayFunction, this);// array event\r\n            updateScoreAndLives.on(\"scoreAndLives\", this.scoreAndLives, this); // update score and manage lives displayed\r\n        }\r\n\r\n        //******oxigen bar ****** */\r\n        oxigenBar = this.add.graphics({\r\n            fillStyle: {\r\n                color: 0x000FF // blue\r\n            }\r\n        });\r\n\r\n        oxigenBar.fillRect(380, 545, oxigenLevel, 18).setDepth(1);\r\n        // ************add  text***********\r\n\r\n        scoreText = this.add.text(16, 16, \"Score:\", { fontSize: \"24px\", fill: \"#000\" });\r\n        updateScoreAndLives.emit(\"scoreAndLives\", 0); // update score and display lives\r\n        this.add.text(280, 542, \"OXIGEN:\", { fontSize: \"24px\", fill: \"#000\" });\r\n\r\n        // ******** sound********\r\n        this.sound.play(CST.AUDIO.GAME_MUSIC, { // load main theme\r\n            loop: true,\r\n            volume: 0.2\r\n        });\r\n\r\n        //add player submarine**************\r\n        this.submarine = this.physics.add.sprite(400, 75, CST.SPRITE.SUBMARINE, 0).setScale(1);\r\n        this.submarine.setSize(80, 20).setOffset(6, 10);// change submarine hitbox size\r\n        this.submarine.body.customBoundsRectangle = new Phaser.Geom.Rectangle(0, 75, 800, 460);\r\n        this.submarine.body.setCollideWorldBounds(true);\r\n\r\n        //add enemy submarine****************\r\n        this.manyEnemies = this.physics.add.group();\r\n        this.manyEnemies.defaults.setImmovable = true; // group deafults\r\n        //this.manyEnemies.defaults.setBoundsRectangle = customBounds;\r\n\r\n        //submarine group****************\r\n        this.manySharks = this.physics.add.group();\r\n        this.manySharks.defaults.setImmovable = true; // group deafults\r\n        //this.manySharks.defaults.setCollideWorldBounds = true;\r\n        //this.manySharks.defaults.setBoundsRectangle = customBounds;\r\n\r\n        //divers group**************\r\n        this.manyDivers = this.physics.add.group();\r\n        //this.manyDivers.defaults.setImmovable = true;\r\n\r\n        //********group of divers saved***** */\r\n        this.diversSaved = this.add.group();\r\n\r\n        for (let i = 0; i < diversRescued; i++) {\r\n            diversXPos += 50;\r\n            this.diversSaved.add(this.add.sprite(diversXPos, 580, CST.SPRITE.DIVER, 0).setScale(0.15));\r\n        }\r\n\r\n        // bomb group*****************\r\n        this.manyBombs = this.physics.add.group();\r\n        this.manyBombs.defaults.setImmovable = true; // group deafults\r\n        //this.rightBombs.defaults.setCollideWorldBounds = true;\r\n        //this.rightBombs.defaults.setBoundsRectangle = new Phaser.Geom.Rectangle(0, 0, this.game.renderer.width, this.game.renderer.height);\r\n\r\n        // add a timed events\r\n        this.timedEvents();\r\n\r\n        // *************sprite colition******************\r\n\r\n        this.physics.add.collider(this.background, this.manyBombs, function (_background, manyBombs) { // left bomb collition detect\r\n\r\n            if (manyBombs.body.checkWorldBounds() == true) {// checks if the bombs are in the world bounds\r\n                manyBombs.destroy();// if not destroy bombs\r\n            }\r\n        });\r\n\r\n        this.physics.add.collider(this.submarine, this.manySharks, function (submarine, _shark) { // collition detect\r\n            submarine.active = false;\r\n        });\r\n\r\n        this.physics.add.collider(this.submarine, this.manyEnemies, function (submarine, _enemy) { // collition detect\r\n            submarine.active = false;\r\n        });\r\n\r\n        this.physics.add.collider(this.submarine, this.manyBombs, function (submarine, manyBombs) { // collition detect\r\n\r\n            if (manyBombs.tintTopLeft == 0xff0000) submarine.active = false;\r\n        });\r\n\r\n        this.physics.add.collider(this.manyDivers, this.manySharks, function (diver, shark) { // collition detect\r\n            const sharkVel = shark.body.velocity.x// take the shark velocity and transfer it to the kamikaze diver\r\n\r\n            if (diver.tintTopLeft == 0x0000FF) {\r\n                diver.body.setVelocityX(sharkVel);\r\n\r\n                if (sharkVel > 0) {// depending on the shark velocitcity is the kamikaze diver orientation\r\n                    diver.play(\"diverLeftToRight\");\r\n                } else {\r\n                    diver.play(\"diverRightToLeft\");\r\n                }\r\n            }\r\n        });\r\n\r\n        this.physics.add.collider(this.manyDivers, this.manyEnemies, function (diver, _enemies) { // collition detect\r\n\r\n            if (diver.tintTopLeft == 0x0000FF && diver.body.checkWorldBounds() == false) {// enemies will destroy kamikaze divers and rest points only in bounds\r\n                diver.destroy();\r\n                makeSoundFx.emit(\"sound\", 2);\r\n\r\n                if (score >= 20) updateScoreAndLives.emit(\"scoreAndLives\", -20);\r\n            }\r\n        });\r\n\r\n        this.physics.world.addCollider(this.manyDivers, this.manyDivers, function (diverOne, diverTwo) {// if divers collide with each other they go separated ways\r\n\r\n            if (diverOne.body.velocity.x > 0) {\r\n                diverOne.body.setVelocityX(diverStandarVelocity);\r\n                diverOne.play(\"diverLeftToRight\");\r\n            } else {\r\n                diverOne.body.setVelocityX(-diverStandarVelocity);\r\n                diverOne.play(\"diverRightToLeft\");\r\n            }\r\n\r\n            if (diverTwo.body.velocity.x > 0) {\r\n                diverTwo.body.setVelocityX(diverStandarVelocity);\r\n                diverTwo.play(\"diverLeftToRight\");\r\n            } else {\r\n                diverTwo.body.setVelocityX(-diverStandarVelocity);\r\n                diverTwo.play(\"diverRightToLeft\");\r\n            }\r\n\r\n            if (diverOne.tintTopLeft != 0x0000FF && diverTwo.tintTopLeft != 0x0000FF) diverOne.destroy(); //If both divers are the same color then one is destroyed\r\n        });\r\n\r\n        this.physics.add.overlap(this.manyDivers, this.manyBombs, function (diver, manyBombs) { // collition detect          \r\n            const bombsVel = manyBombs.body.velocity.x\r\n            diver.body.setVelocityX(bombsVel); // bombs force all divers to flee in oposite direction.\r\n\r\n            if (bombsVel > 0) {\r\n                diver.play(\"diverLeftToRight\");\r\n            } else {\r\n                diver.play(\"diverRightToLeft\");\r\n            }\r\n        });\r\n\r\n        diversCollider = this.physics.add.collider(this.manyDivers, this.submarine, function (_submarine, diver) { // collition detect\r\n            let thisScore = 10; // keep trak of normal divers score or kamikaze divers score\r\n\r\n            if (diver.tintTopLeft != 0x0000FF) {\r\n                yPosArrayFunction.emit(\"updateArray\", diver);// only update array with normal divers\r\n                thisScore += 10;// more score if it is a kamikaze diver\r\n            }\r\n            diver.destroy();\r\n            updateScoreAndLives.emit(\"scoreAndLives\", thisScore);\r\n            makeSoundFx.emit(\"sound\", 2);\r\n            diverRescued.emit(\"rescued\");\r\n\r\n            if (diversRescued == 6) diversCollider.active = false;// if the submarine is full of divers do not rescue more\r\n        });\r\n\r\n        this.physics.add.overlap(this.manySharks, this.manyBombs, function (manySharks, manyBombs) { // collition detect          \r\n\r\n            if (manyBombs.tintTopLeft != 0xFF0000) {// take color to separate player bombs vs enemy bombs\r\n                yPosArrayFunction.emit(\"updateArray\", manySharks);\r\n                manyBombs.destroy();\r\n                manySharks.destroy();\r\n                updateScoreAndLives.emit(\"scoreAndLives\", 5);\r\n                makeSoundFx.emit(\"sound\", 1);\r\n            }\r\n        });\r\n\r\n        this.physics.add.collider(this.manyEnemies, this.manyBombs, function (manyEnemies, manyBombs) { // collition detect\r\n\r\n            if (manyBombs.tintTopLeft != 0xFF0000 && manyEnemies.tintTopLeft != 0x0000FF) {// prevent killing of patrol sub and from frendly fire\r\n                yPosArrayFunction.emit(\"updateArray\", manyEnemies);\r\n                manyBombs.destroy();\r\n                manyEnemies.destroy();\r\n                updateScoreAndLives.emit(\"scoreAndLives\", 10);\r\n                makeSoundFx.emit(\"sound\", 0);\r\n            }\r\n        });\r\n    }\r\n\r\n    timedEvents() {\r\n        incrementEnemiesVelocity = level * 2;\r\n        this.time.removeAllEvents();\r\n        this.time.addEvent({ delay: Phaser.Math.Between(2000, (3000 - incrementEnemiesVelocity)), callback: this.sharkEvent, callbackScope: this, loop: true }); // create a shark \r\n        this.time.addEvent({ delay: Phaser.Math.Between(4000, (5000 - incrementEnemiesVelocity)), callback: this.enemySubEvent, callbackScope: this, loop: true });// create a enemy sub\r\n        this.time.addEvent({ delay: Phaser.Math.Between(2000, (4000 - incrementEnemiesVelocity)), callback: this.enemySubFire, callbackScope: this, loop: false });// create a enemy sub fire event\r\n        this.time.addEvent({ delay: (6000 + incrementEnemiesVelocity), callback: this.diverEvent, callbackScope: this, loop: true });// create a diver\r\n        this.time.addEvent({ delay: 1000, callback: this.sharkWavePattern, callbackScope: this, loop: true });// create a diver\r\n        this.time.addEvent({ delay: 1000, callback: this.oxigenTimer, callbackScope: this, loop: true });// create a diver\r\n\r\n        if (level > 2) this.time.addEvent({ delay: Phaser.Math.Between(10000, (15000 - incrementEnemiesVelocity)), callback: this.patrolSubmarineEvent, callbackScope: this, loop: true });// create a enemy sub fire event\r\n    }\r\n\r\n    scoreAndLives(scoreToAdd) { // add score and manage lives\r\n        score += scoreToAdd;\r\n\r\n        if (score > extraLife) {\r\n            extraLife += 1000;\r\n            if (lives < 4) {\r\n                lives++;// every 1000 points add a new life if less than 4 \r\n            } else {\r\n                score += 100;// else give you bonus points\r\n            }\r\n        }\r\n        scoreText.setText(\"Score:\" + score);\r\n        let livesXPos = 740;\r\n\r\n        for (let x = lives; x > 0; x--) {\r\n            const submarineLives = this.add.sprite(livesXPos, 12, CST.SPRITE.SUBMARINE, 0).setScale(0.4);\r\n            livesXPos -= (submarineLives.displayWidth * 1.1);\r\n        }\r\n    }\r\n\r\n    arrayFunction(object) {\r\n        yPosArray.sort(function (a, b) { return a - b });// arrange numbers in acending order\r\n\r\n        if (yPosArray[0] == 0) yPosArray[0] = (Math.round(object.body.center.y / 100) * 100) + 20;\r\n    }\r\n\r\n    //*****Create sound effects********* */\r\n    soundFx(effect) {// emits one time sounds no repeat\r\n        switch (effect) {\r\n            case 0:\r\n                this.sound.play(CST.AUDIO.ENEMY_SOUND);// enemy killed\r\n                break;\r\n            case 1:\r\n                this.sound.play(CST.AUDIO.SHARK_SOUND);// shark killed\r\n                break;\r\n            case 2:\r\n                this.sound.play(CST.AUDIO.DIVER_SOUND);// diver rescued sound\r\n                break;\r\n            case 3:\r\n                this.sound.play(CST.AUDIO.OXIGEN);//oxigen refill sound\r\n                break;\r\n        }\r\n    }\r\n\r\n    /******Dispay number of divers rescued on screen******** */\r\n    rescueEvent() {\r\n\r\n        if (!submarineOnSurface && this.diversSaved.getLength() < 6) {\r\n            diversToRescue = 1;\r\n            diversRescued++;\r\n            diversXPos += 50;\r\n            this.diversSaved.add(this.add.sprite(diversXPos, 580, CST.SPRITE.DIVER, 0).setScale(0.15));\r\n\r\n            if (diversRescued == 6) {// if 6 divers are rescued emit a \"ding\"\r\n                this.sound.play(CST.AUDIO.RESCUE_COMPLETED);\r\n                diversToRescue = 6;\r\n            }\r\n        } else if (submarineOnSurface && diversToRescue > 0) {\r\n\r\n            if (diversRescued == 6) {\r\n\r\n                if (level < 30) level++; // advance to next level if there are 6 divers rescued    \r\n                updateScoreAndLives.emit(\"scoreAndLives\", 50); // gives 50 points if all divers are recued\r\n                this.timedEvents();\r\n            }\r\n            diversXPos -= 50;\r\n            diversToRescue--;\r\n            diversRescued--;\r\n            const getDivers = this.diversSaved.getChildren();\r\n            this.diversSaved.remove(getDivers[diversRescued], true, true);\r\n        }\r\n    }\r\n\r\n    /********Oxigen bar timer******** */\r\n    oxigenTimer() {\r\n\r\n        if (submarineOnSurface && pausePlayer) {// if submarine is on surface oxigen is refilled \r\n            diverRescued.emit(\"rescued\");\r\n\r\n            if (oxigenLevel < 100) {\r\n                oxigenLevel += 15; // recharge oxigen\r\n            }\r\n\r\n            if (oxigenLevel > 30) {// retrun oxigenbar to is origianl color\r\n                oxigenBar.clear();\r\n                oxigenBar.defaultFillColor = 0x000FF;\r\n            }\r\n\r\n            if (oxigenLevel > 100) {\r\n                oxigenLevel = 100;\r\n            }\r\n\r\n            if (diversToRescue == 0 && oxigenLevel == 100) {\r\n                diversCollider.active = true;// reenable divers rescue collider\r\n                pausePlayer = false;// unpause player\r\n                this.sound.stopByKey(CST.AUDIO.OXIGEN);// stop oxigen refill sound\r\n                this.sound.removeByKey(CST.AUDIO.OXIGEN_LOW);// stop oxigen refill sound\r\n                this.sound.resumeAll();// resume music\r\n            } else {\r\n                makeSoundFx.emit(\"sound\", 3);// oxigen refill\r\n            }\r\n        }\r\n\r\n        if (!submarineOnSurface) {// if the submarine is underwater oxigen is consumed\r\n            oxigenBar.clear();\r\n\r\n            if (oxigenLevel -= 2, oxigenLevel < 1) { // if no oxigen left end game.\r\n                this.endGame();\r\n            }\r\n\r\n            if (oxigenLevel == 30) {\r\n                oxigenBar.defaultFillColor = 0xFF0000;\r\n                this.sound.play(CST.AUDIO.OXIGEN_LOW, { // load main theme\r\n                    loop: true,\r\n                    volume: 0.3\r\n                });\r\n            }\r\n        }\r\n        oxigenBar.fillRect(380, 545, oxigenLevel, 18).setDepth(1);\r\n    }\r\n\r\n    updateBodies() { // check if the place if already in use by another body\r\n\r\n        for (let i = 0; i < this.manySharks.getLength(); i++) {\r\n\r\n            if (getShark[i].body.right <  -getShark[i].displayWidth || getShark[i].body.left > (this.game.renderer.width + getShark[i].displayWidth)) {  // looping the array to destroy sharks that are out of bounds.\r\n                yPosArrayFunction.emit(\"updateArray\", getShark[i]);\r\n                getShark[i].destroy();\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < this.manyEnemies.getLength(); i++) {\r\n\r\n            if (getEnemy[i].body.right < -getEnemy[i].displayWidth || getEnemy[i].body.left > (this.game.renderer.width + getEnemy[i].displayWidth)) {  // looping the array to destroy sharks that are out of bounds.\r\n\r\n                if (getEnemy[i].tintTopLeft != 0xFF0012) yPosArrayFunction.emit(\"updateArray\", getEnemy[i]);// only update the array with normal enemies, other color enemies are not taken in account (like the patrol submarine)\r\n                getEnemy[i].destroy();\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < this.manyDivers.getLength(); i++) {\r\n\r\n            if (getDiver[i].body.right < -getDiver[i].displayWidth || getDiver[i].body.left > (this.game.renderer.width + getDiver[i].displayWidth)) {  // looping the array to destroy sharks that are out of bounds.\r\n\r\n                if (getDiver[i].tintTopLeft != 0x0000FF) yPosArrayFunction.emit(\"updateArray\", getDiver[i]);// only update normal divers not kamikaze ones\r\n                getDiver[i].destroy();\r\n            }\r\n        }\r\n    }\r\n\r\n    //************Timed events**************** */\r\n    sharkEvent() { // callback shark timed event\r\n        this.updateBodies();\r\n\r\n        for (let index = 0; index < yPosArray.length; index++) {\r\n\r\n            if (yPosArray[index] != 0) {\r\n                const sharkGroupLength = this.manySharks.getLength();\r\n                this.manySharks.add(this.physics.add.sprite(0, 0, CST.SPRITE.SHARK, 0).setScale(0.15).setVisible(false));\r\n                getShark = this.manySharks.getChildren(); // get all children of the group \r\n\r\n                if (Phaser.Math.Between(0, 10) % 2 == 0) {\r\n                    getShark[sharkGroupLength].body.reset(-getShark[sharkGroupLength].body.halfWidth, yPosArray[index]);\r\n                    getShark[sharkGroupLength].body.setVelocityX(sharkStandarVelocity + incrementEnemiesVelocity);\r\n                    this.anims.play(\"sharkLeftToRight\", getShark[sharkGroupLength]);\r\n                } else {\r\n                    getShark[sharkGroupLength].body.reset(this.game.renderer.width + getShark[sharkGroupLength].body.halfWidth, yPosArray[index]);\r\n                    getShark[sharkGroupLength].body.setVelocityX(-sharkStandarVelocity - incrementEnemiesVelocity);\r\n                    this.anims.play(\"sharkRightToLeft\", getShark[sharkGroupLength])\r\n                }\r\n                getShark[sharkGroupLength].setVisible(true);\r\n\r\n                if (level > 2) {\r\n                    getShark[sharkGroupLength].tint = 0xFF0000; // change shark color to red from the 3er level and up\r\n\r\n                    if (Phaser.Math.Between(0, 2) == 0) this.kamikazeDiver(getShark[sharkGroupLength]);// spawn a kamikaze diver.\r\n                }\r\n                yPosArray[index] = 0;// 0 in index means no body is allowed to spawn in that location\r\n            }\r\n        }\r\n    }\r\n\r\n    sharkWavePattern() {\r\n\r\n        for (let i = 0; i < this.manySharks.getLength(); i++) { // make sharks move up and down\r\n            if (getShark[i].body.velocity.y > 0) {\r\n                getShark[i].body.setVelocityY(-10);\r\n            } else {\r\n                getShark[i].body.setVelocityY(10);\r\n            }\r\n        }\r\n    }\r\n    //***** Enemy submarine events******** */\r\n    enemySubEvent() {\r\n        this.updateBodies();\r\n\r\n        for (let index = 0; index < yPosArray.length; index++) {\r\n\r\n            if (yPosArray[index] != 0) {\r\n                const enemiesGroupLength = this.manyEnemies.getLength();\r\n                this.manyEnemies.add(this.physics.add.sprite(0, 0, CST.SPRITE.SUBMARINE, 0).setScale(0.8).setSize(90, 25).setOffset(0, 6).setVisible(false));\r\n                getEnemy = this.manyEnemies.getChildren(); // get all children of the group \r\n                getEnemy[enemiesGroupLength].tint = 0xFF0000; // change the color to red\r\n\r\n                if (Phaser.Math.Between(0, 1) == 0) {// if the number is even\r\n                    getEnemy[enemiesGroupLength].body.reset(-getEnemy[enemiesGroupLength].body.halfWidth, yPosArray[index]);\r\n                    getEnemy[enemiesGroupLength].body.setVelocityX(enemyStandarVelocity + incrementEnemiesVelocity);\r\n                    this.anims.play(\"left\", getEnemy[enemiesGroupLength]);\r\n                } else {\r\n                    getEnemy[enemiesGroupLength].body.reset(this.game.renderer.width + getEnemy[enemiesGroupLength].body.halfWidth, yPosArray[index]);\r\n                    getEnemy[enemiesGroupLength].body.setVelocityX(-enemyStandarVelocity - incrementEnemiesVelocity);\r\n                    this.anims.play(\"right\", getEnemy[enemiesGroupLength]);\r\n                }\r\n                getEnemy[enemiesGroupLength].setVisible(true);\r\n                yPosArray[index] = 0; // 0 in index means no body is allowed to spawn in that location\r\n            }\r\n        }\r\n    }\r\n\r\n    enemySubFire() {\r\n        this.time.addEvent({ delay: Phaser.Math.Between(1000, (6000 - incrementEnemiesVelocity)), callback: this.enemySubFire, callbackScope: this, loop: false });// create a enemy sub fire event\r\n        getEnemy = this.manyEnemies.getChildren(); // get all children of the group  \r\n\r\n        for (let i = 0; i < this.manyEnemies.getLength(); i++) {\r\n            const bombsGroupLength = this.manyBombs.getLength();\r\n            this.manyBombs.add(this.physics.add.sprite(0, 0, CST.SPRITE.BOMB, 0).setScale(0.10).setVisible(false));\r\n            const getBomb = this.manyBombs.getChildren(); // get all children of the group \r\n            getBomb[bombsGroupLength].tint = 0xFF0000;\r\n\r\n            if (getEnemy[i].body.velocity.x == (-enemyStandarVelocity - incrementEnemiesVelocity) && getEnemy[i].tintTopLeft != 0xFF0012) {/// get enemy direction to fire the bomb correctly and prevent the patrol sub from firing\r\n                getBomb[bombsGroupLength].body.reset(getEnemy[i].x - getEnemy[i].body.halfWidth, getEnemy[i].y);\r\n                getBomb[bombsGroupLength].body.setVelocityX(-200 - incrementEnemiesVelocity);\r\n                this.anims.play(\"bombLeft\", getBomb[bombsGroupLength]);\r\n            } else if (getEnemy[i].body.velocity.x == (enemyStandarVelocity + incrementEnemiesVelocity)) {/// get enemy direction\r\n                getBomb[bombsGroupLength].body.reset(getEnemy[i].x + getEnemy[i].body.halfWidth, getEnemy[i].y);\r\n                getBomb[bombsGroupLength].body.setVelocityX(200 + incrementEnemiesVelocity);\r\n                this.anims.play(\"bombRight\", getBomb[bombsGroupLength]);\r\n            }\r\n            getBomb[bombsGroupLength].setVisible(true);\r\n        }\r\n    }\r\n\r\n    patrolSubmarineEvent() {\r\n\r\n        if (submarineOnSurface == true) return; // only generate the patrol submarine if the player is not on surface\r\n        this.manyEnemies.add(this.physics.add.sprite(this.game.renderer.width, 80, CST.SPRITE.SUBMARINE, 0).setScale(0.8).setSize(90, 25).setOffset(0, 6));\r\n        getEnemy = this.manyEnemies.getChildren(); // get all children of the group \r\n        const enemiesGroupLength = (this.manyEnemies.getLength() - 1);\r\n        getEnemy[enemiesGroupLength].body.setVelocityX(-enemyStandarVelocity);\r\n        getEnemy[enemiesGroupLength].tint = 0xFF0012; // change the color to light red\r\n        this.anims.play(\"right\", getEnemy[enemiesGroupLength]);\r\n    }\r\n\r\n    diverEvent() {\r\n        this.updateBodies();\r\n\r\n        for (let index = 0; index < yPosArray.length; index++) {\r\n\r\n            if (yPosArray[index] != 0) {\r\n                const diversGroupLength = this.manyDivers.getLength();\r\n                this.manyDivers.add(this.physics.add.sprite(0, 0, CST.SPRITE.DIVER, 0).setScale(0.15).setVisible(false));\r\n                getDiver = this.manyDivers.getChildren(); // get all children of the group \r\n\r\n                if (Phaser.Math.Between(0, 10) % 2 == 0) {\r\n                    getDiver[diversGroupLength].body.reset(-getDiver[diversGroupLength].body.halfWidth, yPosArray[index]);\r\n                    getDiver[diversGroupLength].body.setVelocityX(diverStandarVelocity + incrementEnemiesVelocity);\r\n                    this.anims.play(\"diverLeftToRight\", getDiver[diversGroupLength]);\r\n                } else {\r\n                    getDiver[diversGroupLength].body.reset(this.game.renderer.width + getDiver[diversGroupLength].body.halfWidth, yPosArray[index]);\r\n                    getDiver[diversGroupLength].body.setVelocityX(-diverStandarVelocity - incrementEnemiesVelocity);\r\n                    this.anims.play(\"diverRightToLeft\", getDiver[diversGroupLength]);\r\n                }\r\n                yPosArray[index] = 0;\r\n                getDiver[diversGroupLength].setVisible(true);\r\n\r\n                if (diversGroupLength > 3) return;// do not allow more than 3 divers at onece\r\n            }\r\n        }\r\n    }\r\n\r\n    kamikazeDiver(sharkBody) {\r\n        const sharkRight = sharkBody.body.right;\r\n        const sharkLeft = sharkBody.body.left;\r\n        const sarkHalfWidth = sharkBody.body.halfWidth;\r\n        const sharkCenterY = sharkBody.body.center.y;\r\n\r\n        if (sharkBody.body.velocity.x == (-sharkStandarVelocity - incrementEnemiesVelocity) && sharkRight > this.game.renderer.width) {/// get enemy direction to fire the bomb correctly and prevent the patrol sub from firing\r\n            this.manyDivers.add(this.physics.add.sprite((sharkLeft - sarkHalfWidth), sharkCenterY, CST.SPRITE.DIVER, 0).setScale(0.15));\r\n        } else if (sharkBody.body.velocity.x == (sharkStandarVelocity + incrementEnemiesVelocity) && sharkLeft < 0) {/// get enemy direction to fire the bomb correctly and prevent the patrol sub from firing)\r\n            this.manyDivers.add(this.physics.add.sprite((sharkRight + sarkHalfWidth), sharkCenterY, CST.SPRITE.DIVER, 0).setScale(0.15));\r\n        }\r\n        const diversGroupLength = (this.manyDivers.getLength() - 1)//rest one to get the actual number of divers because arrays count from 0\r\n\r\n        if (diversGroupLength >= 0) {// if this isn´t checked if there are no divers it crashes the game\r\n            getDiver = this.manyDivers.getChildren(); // get all children of the group \r\n            getDiver[diversGroupLength].tint = 0x0000FF;\r\n        }\r\n    }\r\n\r\n    endGame() {\r\n        this.input.shutdown();\r\n        this.sound.removeByKey(CST.AUDIO.GAME_MUSIC);// stop oxigen refill sound\r\n        this.submarine.tint = 0x000000; // change submarine color to black\r\n\r\n        if (lives > 0) {\r\n\r\n            if (diversRescued > 0) diversRescued--;\r\n            lives--; // rest one live\r\n            continueGame = true;\r\n        } else {\r\n            lives = 3;// reset lives\r\n            extraLife = 1000; //reset extra life bonus\r\n            diversRescued = 0;\r\n            continueGame = false;\r\n        }\r\n        this.scene.pause(CST.SCENES.PLAY);// stop current scene\r\n        this.scene.run(CST.SCENES.END, { finalScore: score, gameLevel: level, continue: continueGame });// go to score scene*/\r\n    }\r\n\r\n    update(time, delta) {// delta 16.6666 @60fps\r\n\r\n        //*********player movement******** */\r\n        if (this.submarine.active == true) { // inputs only ative while player is alive\r\n\r\n            if (!submarineOnSurface && this.submarine.body.onCeiling() == true && this.submarine.body.y < 76) {// checks if the bombs are in the world bounds\r\n\r\n                if (!submarineOnSurface && this.diversSaved.getLength() == 0) {// if the submarine reaches the surface without any diver end game\r\n                    this.endGame();\r\n                }\r\n                submarineOnSurface = true;\r\n                pausePlayer = true;\r\n                this.submarine.setVelocityY(0);\r\n                this.submarine.setVelocityX(0);\r\n                this.sound.pauseAll();// stop music\r\n            }\r\n\r\n            if (pausePlayer) return;// if refilling oxigen the submarine isn´t movable\r\n\r\n            if (actionKeyRepeat == true && (actionKey == true || actionKey.isDown == true)) {\r\n                actionKeyRepeat = false;\r\n                this.sound.play(CST.AUDIO.PLAYER_FIRE_SOUND);\r\n                const getBomb = this.manyBombs.getChildren(); // get all children of the group \r\n                const bombsGroupLength = this.manyBombs.getLength();\r\n\r\n                if (actionKey == true) actionKey = false;\r\n\r\n                if (playerDirection == 1) {\r\n                    this.manyBombs.add(this.physics.add.sprite(this.submarine.body.center.x + this.submarine.body.halfWidth, this.submarine.body.center.y, CST.SPRITE.BOMB, 0).setScale(0.08));\r\n                    getBomb[bombsGroupLength].body.setVelocityX(220);\r\n                    this.anims.play(\"bombRight\", getBomb[bombsGroupLength]);\r\n                } else {\r\n                    this.manyBombs.add(this.physics.add.sprite(this.submarine.body.center.x - this.submarine.body.halfWidth, this.submarine.body.center.y, CST.SPRITE.BOMB, 0).setScale(0.08));\r\n                    getBomb[bombsGroupLength].body.setVelocityX(-220);\r\n                    this.anims.play(\"bombLeft\", getBomb[bombsGroupLength]);\r\n                }\r\n                this.time.delayedCall(500, () => {\r\n                    if (actionKeyRepeat == false) actionKeyRepeat = true;\r\n                });\r\n            }\r\n\r\n            if (this.controls.right.isDown == true) { // left submarine  sprite movement\r\n                this.submarine.setVelocityX(submarineSpeed);\r\n                this.submarine.play(\"left\", true);\r\n                playerDirection = 1;\r\n            }\r\n\r\n            if (this.controls.left.isDown == true) { // right submarine sprite movement\r\n                this.submarine.setVelocityX(-submarineSpeed);\r\n                this.submarine.play(\"right\", true);\r\n                playerDirection = -1;\r\n            }\r\n\r\n            if ((this.controls.left.isUp && this.controls.right.isUp)) { // not moving on x axis\r\n                this.submarine.setVelocityX(0);\r\n            }\r\n\r\n            if (this.controls.up.isDown == true) { // up submarine  sprite movement              \r\n                this.submarine.setVelocityY(-submarineSpeed);\r\n            }\r\n\r\n            if (this.controls.up.isUp && this.controls.down.isUp) { // not moving on x axis\r\n                this.submarine.setVelocityY(0);\r\n            }\r\n\r\n            if (this.controls.down.isDown == true && this.submarine.body.onFloor() == false) { // down submarine sprite movement\r\n                this.submarine.setVelocityY(submarineSpeed);\r\n                submarineOnSurface = false;\r\n            }\r\n\r\n        } else {\r\n            this.endGame();\r\n        }\r\n\r\n        if (escKey.isDown == true) {\r\n            score = 0;\r\n            this.scene.stop(CST.SCENES.PLAY);\r\n            this.scene.run(CST.SCENES.MENU);\r\n        }\r\n    }\r\n}\r\n","import { CST } from \"../CST\";\r\nlet score = 0;\r\nlet level = 0;\r\nlet restart = true;\r\nlet continueGame = false;\r\n\r\n\r\nexport class EndScene extends Phaser.Scene {\r\n\r\n    constructor() {\r\n        super({ key: CST.SCENES.END });\r\n    }\r\n    init(data) {\r\n        score = data.finalScore;\r\n        level = data.gameLevel;\r\n        continueGame = data.continue;\r\n    }\r\n\r\n    preload() {\r\n        this.sound.stopAll(); // stops menu sound \r\n        this.sound.play(CST.AUDIO.END_SOUND);\r\n    }\r\n\r\n    goToPlayScene() {\r\n        this.scene.sleep(CST.SCENES.END);\r\n        this.scene.start(CST.SCENES.PLAY, { gameLevel: level, sceneRestart: restart, resetScore: score });// restart play scene\r\n    }\r\n\r\n    create() {\r\n\r\n        if (continueGame == true) {\r\n            this.time.delayedCall(2000, () => {\r\n                this.goToPlayScene();\r\n            });\r\n        } else {\r\n            this.add.image(0, 0, CST.IMAGE.END_BG).setOrigin(0).setDepth(0);// background\r\n            let playButton = this.add.image(this.game.renderer.width / 2, this.game.renderer.height / 2.3, CST.IMAGE.PLAY).setDepth(1).setScale(0.10);\r\n            let scoreText = this.add.text(285, 100, \"Final Score:\", { fontSize: \"32px\", fill: \"#FFF\" });\r\n            scoreText.setText(\"Final   Score:\" + score);\r\n            score = 0; //reset score\r\n\r\n            // make buttons interactive\r\n            playButton.setInteractive();\r\n\r\n            playButton.on(\"pointerup\", () => {\r\n                //this.sys.game.destroy(true); // end game and exit\r\n                score = 0;\r\n                this.goToPlayScene();\r\n            })\r\n        }\r\n        this.controls = this.input.keyboard.addKeys(\"enter\");// keyboard keys\r\n    }\r\n\r\n    update(time, delta) {\r\n\r\n        if (this.controls.enter.isDown == true) {// use enter key to restart game\r\n            this.goToPlayScene();\r\n        }\r\n    }\r\n}\r\n\r\n","/** @type {import(\"../typings/phaser\")} */\r\n\r\nimport { LoadScene } from \"./scenes/LoadScene\";\r\nimport { MenuScene } from \"./scenes/MenuScene\";\r\nimport { PlayScene } from \"./scenes/PlayScene\";\r\nimport { EndScene } from \"./scenes/EndScene\";\r\n\r\nlet game = new Phaser.Game({\r\n    scene: [\r\n        LoadScene, MenuScene, PlayScene, EndScene\r\n    ],\r\n    render: {\r\n        pixelArt: true\r\n    },\r\n    scale: {\r\n        autoCenter: Phaser.Scale.CENTER_BOTH,\r\n        mode: Phaser.Scale.AUTO, // use FIT to center preserving aspect ratio or AUTO to fullscreen without preserving aspect\r\n        width: 800,\r\n        height: 600\r\n    },\r\n    physics: {\r\n        default: \"arcade\",\r\n        arcade: {\r\n            debug: false,\r\n            debugShowBody: false, // show hitbox \r\n            debugShowStaticBody: false\r\n        }\r\n    }\r\n});\r\n"]}